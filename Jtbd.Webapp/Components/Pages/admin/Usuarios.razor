@page "/admin/usuarios/{userrol}"
@rendermode InteractiveServer
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Usuarios> Logger
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Usuarios</PageTitle>

@if (userrol == "1")
{
    <div class="row align-content-center">
        <div class="col-lg-11">
            <h3 class="text-start mt-4">Gestión de Usuarios</h3>
            <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-primary" @onclick="MostrarFormulario" title="Agregar Usuario">
                    <i class="bi bi-plus-lg"></i> 
                </button>
            </div>

            @if (mostrarAlerta)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @mensajeAlerta
                    <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
                </div>
            }


            @if (usuarios is null)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status"></div>
                    <p>Cargando datos...</p>
                </div>
            }
            else if (!usuarios.Any())
            {
                <div class="alert alert-info text-center">No hay usuarios disponibles.</div>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead class="table-secondary bg-opacity-25">
                        <tr>
                            <th width="10%">#</th>
                            <th width="30%">Nombre</th>
                            <th width="15%">Departamento</th>
                            <th width="15%">Rol</th>
                            <th width="15%">Estatus</th>
                            <th width="15%"> </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (p, index) in usuarios.Select((p, i) => (p, i + 1)))
                        {
                            <tr>
                                <td width="10%">@index</td>
                                <td width="30%">@p.EmployeeName</td>
                                <td width="15%">@p.Deparments.Name</td>
                                @switch (p.EmployeeRol)
                                {
                                    case 1:
                                        <td width="15%">Administrador</td>
                                        break;
                                    case 2:
                                        <td width="15%">Analista</td>
                                        break;
                                    case 3:
                                        <td width="15%">Consulta</td>
                                        break;
                                }

                                @switch(p.StatusEmployee)
                                {
                                    case 0:
                                        <td width="15%">Inactivo</td>
                                        break;
                                    case 1:
                                        <td width="15%">Activo</td>
                                        break;
                                }
                                <td width="15%" class="justify-content-end">
                                    <button class="btn btn-success btn-sm me-1" @onclick="() => EditarEntidad(p)" title="Editar">
                                        <i class="bi bi-pencil"></i> 
                                    </button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarEntidad(p.Id)" title="Eliminar">
                                        <i class="bi bi-trash"></i> 
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

    @if (mostrarFormulario)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(usuarioActual.Id == 0 ? "Agregar" : "Editar")</h5>
                        <button type="button" class="btn-close" @onclick="Cancelar"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@usuarioActual" OnValidSubmit="GuardarEntidad">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label class="form-label">Nombre:</label>
                                <InputText class="form-control" @bind-Value="usuarioActual.EmployeeName" />
                                <ValidationMessage For="@(() => usuarioActual.EmployeeName)" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Roles:</label>
                                <InputSelect class="form-select" @bind-Value="usuarioActual.EmployeeRol">
                                    <option value="-1">-- Seleccione uno --</option>
                                    <option value="1">Administrador</option>
                                    <option value="2">Analista</option>
                                    <option value="3">Consulta</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => usuarioActual.EmployeeRol)" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Departamentos:</label>
                                <InputSelect class="form-select" @bind-Value="usuarioActual.IdDeparment">
                                    <option value="-1">-- Seleccione uno --</option>
                                    @foreach (var item in departamento)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => usuarioActual.IdDeparment)" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Estatus:</label>
                                <InputSelect class="form-select" @bind-Value="usuarioActual.StatusEmployee">
                                    <option value="-1">-- Seleccione uno --</option>
                                    <option value="1">Activo</option>
                                    <option value="0">Inactivo</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => usuarioActual.StatusEmployee)" />
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-success me-2">
                                    <i class="bi bi-save"></i> Guardar
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                    <i class="bi bi-times"></i> Cancelar
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="row align-content-center">
        <div class="col-lg-11">
            <div class="col-lg-11">
                <h3 class="text-center mt-4">No Autorizado</h3>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string userrol { get; set; }

    private List<Deparments> departamento = new();
    private List<Employee> usuarios = new();
    private CreateEmployee usuarioActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IEmployee repository { get; set; } = null!;
    [Inject] private IDeparments repodepart { get; set; } = null!;
    [Inject] private IEmployee repouser { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            usuarios = (List<Employee>)await repository.GetAllAsync();
            departamento = (List<Deparments>)await repodepart.GetAllAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void MostrarFormulario()
    {
        try
        {
            usuarioActual = new CreateEmployee();
            usuarioActual.IdDeparment = -1;
            usuarioActual.EmployeeRol = -1;
            usuarioActual.StatusEmployee = -1;
            mostrarFormulario = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void EditarEntidad(Employee usuario)
    {
        try
        {
            usuarioActual = new CreateEmployee
                {
                    Id = usuario.Id,
                    EmployeeName = usuario.EmployeeName,
                    EmployeeRol = usuario.EmployeeRol,
                    IdDeparment = usuario.Deparments.Id,
                    StatusEmployee = usuario.StatusEmployee
                };
            mostrarFormulario = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarEntidad()
    {
        try
        {
            if (usuarioActual.Id == 0)
                await repository.CreateAsync( usuarioActual);
            else
                await repository.UpdateAsync( usuarioActual);

            usuarios = (List<Employee>) await repository.GetAllAsync();
            mostrarFormulario = false;
            mensajeAlerta = "Usuario guardado exitosamente.";
            mostrarAlerta = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task EliminarEntidad(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
            if (confirmed)
            {
                await repository.DeleteAsync(id);
                usuarios = (List<Employee>)await repository.GetAllAsync();
                mensajeAlerta = "Usuario eliminado exitosamente.";
                mostrarAlerta = true;
            }
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}