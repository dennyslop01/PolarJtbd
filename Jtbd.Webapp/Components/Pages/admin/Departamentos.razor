@page "/admin/departamentos"
@rendermode InteractiveServer
@using Jtbd.Domain.Entities
@using Jtbd.Webapp.Services
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration

<PageTitle>Departamentos</PageTitle>
<div class="row align-content-center">
    <div class="col-lg-6">
        <h3 class="text-center mt-4">Gestión de Departamentos</h3>
        <div class="d-flex justify-content-end mb-3">
            <button class="btn btn-primary" @onclick="MostrarFormulario">
                <i class="fas fa-plus"></i> Agregar Departamento
            </button>
        </div>

        @if (mostrarAlerta)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @mensajeAlerta
                <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
            </div>
        }


        @if (departamento is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!departamento.Any())
        {
            <div class="alert alert-info text-center">No hay departamentos disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in departamento.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.Id</td>
                            <td>@p.Name</td>
                            <td>
                                <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarEntidad(p)">
                                    <i class="fas fa-edit"></i> Editar
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarEntidad(p.Id)">
                                    <i class="fas fa-trash"></i> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(departamentoActual.Id == 0 ? "Agregar" : "Editar")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="departamentoActual" OnValidSubmit="GuardarEntidad">
                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="departamentoActual.Name" />
                            <ValidationMessage For="@(() => departamentoActual.Name)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Deparments> departamento = new();
    private Deparments departamentoActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;

    [Inject] private IRepositoryGeneric repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var urlbase = configuration.GetSection("ApiBack").Value.ToString();
        var url1 = "/api/deparments";

        departamento = await repository.GetAsync<List<Deparments>>(string.Concat(urlbase, url1));
    }

    private void MostrarFormulario()
    {

        departamentoActual = new Deparments();
        mostrarFormulario = true;
    }

    private void EditarEntidad(Deparments deparmento)
    {
        departamentoActual = new Deparments
        {
            Id = deparmento.Id,
            Name = deparmento.Name,
        };
        mostrarFormulario = true;
    }

    private async Task GuardarEntidad()
    {
        var urlbase = configuration.GetSection("ApiBack").Value.ToString();
        var url1 = "/api/deparments/";
        var url2 = $"/api/deparments/{departamentoActual.Id}";

        if (departamentoActual.Id == 0)
            await repository.PostAsync(string.Concat(urlbase, url1), departamentoActual);
        else
            await repository.PutAsync(string.Concat(urlbase, url2), departamentoActual);

        departamento = await repository.GetAsync<List<Deparments>>(string.Concat(urlbase, url1));
        mostrarFormulario = false;
        mensajeAlerta = "Deparmento guardad0 exitosamente.";
        mostrarAlerta = true;
    }

    private async Task EliminarEntidad(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
        if (confirmed)
        {
            var urlbase = configuration.GetSection("ApiBack").Value.ToString();
            var url1 = "/api/deparments/";
            var url2 = $"/api/deparments/{id}";

            await repository.DeleteAsync(string.Concat(urlbase, url2));
            departamento = await repository.GetAsync<List<Deparments>>(string.Concat(urlbase, url1));
            mensajeAlerta = "Deparmento eliminad0 exitosamente.";
            mostrarAlerta = true;
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}