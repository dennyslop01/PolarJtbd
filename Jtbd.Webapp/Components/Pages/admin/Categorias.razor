@page "/admin/categorias/{userrol}"
@rendermode InteractiveServer
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Categorias> Logger
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Categorias</PageTitle>
 @if (userrol == "1")
 {   
     <div class="row align-content-center">
        <div class="col-lg-11">
            <h3 class="text-start mt-4">Gestión de Categorías</h3>
            <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-primary" @onclick="MostrarFormulario" title="Agregar Categoría">
                    <i class="bi bi-plus-lg"></i> 
                </button>
            </div>

            @if (mostrarAlerta)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @mensajeAlerta
                    <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
                </div>
            }


            @if (categorias is null)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status"></div>
                    <p>Cargando datos...</p>
                </div>
            }
            else if (!categorias.Any())
            {
                <div class="alert alert-info text-center">No hay categorias disponibles.</div>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead class="table-secondary bg-opacity-25">
                        <tr>
                            <th width="10%">#</th>
                            <th width="70%">Nombre</th>
                            <th width="20%"> </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (p, index) in categorias.Select((p, i) => (p, i + 1)))
                        {
                            <tr>
                                <td width="10%">@p.Id</td>
                                <td width="70%">@p.Name</td>
                                <td width="20%" class="justify-content-end">
                                    <button class="btn btn-success btn-sm me-1" title="Editar" @onclick="() => EditarEntidad(p)">
                                            <i class="bi bi-pencil"></i> 
                                        </button>
                                    <button class="btn btn-danger btn-sm" title="Eliminar" @onclick="() => EliminarEntidad(p.Id)">
                                            <i class="bi bi-trash"></i> 
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

    @if (mostrarFormulario)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(categoriaActual.Id == 0 ? "Agregar" : "Editar")</h5>
                        <button type="button" class="btn-close" @onclick="Cancelar"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="categoriaActual" OnValidSubmit="GuardarEntidad">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label class="form-label">Nombre:</label>
                                <InputText class="form-control" @bind-Value="categoriaActual.Name"  />
                                <ValidationMessage For="@(() => categoriaActual.Name)" />
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-success me-2">
                                    <i class="bi bi-save"></i> Guardar
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                    <i class="bi bi-times"></i> Cancelar
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="row align-content-center">
        <div class="col-lg-11">
            <div class="col-lg-11">
                <h3 class="text-center mt-4">No Autorizado</h3>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string userrol { get; set; }

    private List<Categories> categorias = new();
    private Categories categoriaActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private string username = string.Empty;

    [Inject] private ICategories repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IEmployee repouser { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categorias = (List<Categories>)await repository.GetAllAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void MostrarFormulario()
    {
        try
        {
            categoriaActual = new Categories();
            mostrarFormulario = true;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void EditarEntidad(Categories categoria)
    {
        try
        {
            categoriaActual = new Categories
                {
                    Id = categoria.Id,
                    Name = categoria.Name,
                };
            mostrarFormulario = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarEntidad()
    {
        try
        {
            if (categoriaActual.Id == 0)
                await repository.CreateAsync(categoriaActual);
            else
                await repository.UpdateAsync(categoriaActual);

            categorias = (List<Categories>)await repository.GetAllAsync();
            mostrarFormulario = false;
            mensajeAlerta = "Categoria guardada exitosamente.";
            mostrarAlerta = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task EliminarEntidad(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
            if (confirmed)
            {
                await repository.DeleteAsync(id);
                categorias = (List<Categories>)await repository.GetAllAsync();
                mensajeAlerta = "Categoria eliminada exitosamente.";
                mostrarAlerta = true;
            }
        }
        catch (Exception ex)
        {
            mensajeAlerta = "No se puede eliminar el registros ya que existen relaciones con otras tablas que no han sido eliminadas.";
            mostrarAlerta = true;
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}