@page "/proyect/proyecsagrupar2/{IdProyecto}/{userrol}"
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using Jtbd.Webapp.Data
@using Microsoft.Extensions.Logging
@inject ILogger<Interview> Logger

@rendermode InteractiveServer

<PageTitle>Agrupar Historias</PageTitle>
<div class="row align-content-center">
    <div class="col-lg-12">
        <div class="col-lg-11">
            <div class="d-flex justify-content-start mb-3">
                <button class="btn btn-link btn-sm me-2 align-content-end" title="Regresar" @onclick="Regresar">
                    @(proyecto == null ? "-" : "Proyectos")  <i class="bi bi-arrow-return-left"></i>
                </button>
            </div>
            <h3 class="text-start mt-4">Agrupar Historias</h3>
            <div class="d-flex justify-content-end me-3">
                <button class="btn btn-secondary" @onclick="() => MostrarMatriz(IdProyecto)" title="Matriz Historias">
                    <i class="bi bi-kanban"></i>
                </button>
            </div>

            @if (mostrarAlerta)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @mensajeAlerta
                    <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
                </div>
            }
        </div>
    </div>
</div>

<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="push-tab" data-bs-toggle="tab" data-bs-target="#push" type="button" role="tab" aria-controls="push" aria-selected="true">Historias - Pushes</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="pull-tab" data-bs-toggle="tab" data-bs-target="#pull" type="button" role="tab" aria-controls="pull" aria-selected="false">Historias - Pulls</button>
    </li>
</ul>

<div class="tab-content" id="myTabContent">   
    <div class="tab-pane fade show active" id="push" role="tabpanel" aria-labelledby="push-tab">
        <ForceGroupingInterface 
            UnassignedForces="_unassignedPushes"
            Groups="_pushGroups"
            OnItemDropped="HandlePushDropped" />
    </div>

    <div class="tab-pane fade" id="pull" role="tabpanel" aria-labelledby="pull-tab">
        <ForceGroupingInterface 
            UnassignedForces="_unassignedPulls"
            Groups="_pullGroups"
            OnItemDropped="HandlePullDropped" />
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="row align-content-center">
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(entidadActual.IdGroup == 0 ? "Agregar" : "Editar")</h5>
                        <button type="button" class="btn-close" @onclick="Cancelar"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="entidadActual" OnValidSubmit="GuardarEntidad">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label class="form-label">Nombre:</label>
                                <InputText class="form-control" @bind-Value="entidadActual.GroupName" />
                                <ValidationMessage For="@(() => entidadActual.GroupName)" />
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-success me-2">
                                    <i class="bi bi-save"></i> Guardar
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                    <i class="bi bi-times"></i> Cancelar
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
            </div>
    </div>
}


@code{
    [Parameter]
    public string IdProyecto { get; set; }
    [Parameter]
    public string userrol { get; set; }

    private List<Groups> grupospush = new();
    private List<Groups> grupospull = new();
    private List<StoriesPush> storiespush = new();
    private List<StoriesPull> storiespull = new();
    private CreateGroup entidadActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IGroups repository { get; set; } = null!;
    [Inject] private IProjects repoproyect { get; set; } = null!;
    [Inject] private IStories repostorie { get; set; } = null!;
    [Inject] private IEmployee repouser { get; set; } = null!;
    private Projects proyecto = new();

    private List<ForceItemViewModel> _unassignedPushes = new();
    private List<ForceGroupViewModel> _pushGroups = new();
    private List<ForceItemViewModel> _unassignedPulls = new();
    private List<ForceGroupViewModel> _pullGroups = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarEntidades();
    }

    private async Task CargarEntidades()
    {
        try
        {
            proyecto = (Projects)await repoproyect.GetByIdAsync(int.Parse(IdProyecto));

            grupospush = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 0);
            grupospull = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 1);

            if (grupospush.Count() == 0)
            {
                for (int i = 1; i < 12; i++)
                {
                    string name = $"Grupo {i.ToString()}";
                    if (i == 11)
                        name = "Leftovers";

                    CreateGroup entidadActual = new CreateGroup()
                    {
                        IdGroup = 0,
                        IdTipo = 0,
                        IdProject = int.Parse(IdProyecto),
                        GroupName = name
                    };

                    await repository.CreateAsync(entidadActual);
                }
                grupospush = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 0);
            }

            if (grupospull.Count == 0)
            {
                for (int i = 1; i < 12; i++)
                {
                    string name = $"Grupo {i.ToString()}";
                    if (i == 11)
                        name = "Leftovers";

                    CreateGroup entidadActual = new CreateGroup()
                    {
                        IdGroup = 0,
                        IdTipo = 1,
                        IdProject = int.Parse(IdProyecto),
                        GroupName = name
                    };

                    await repository.CreateAsync(entidadActual);
                }
                grupospull = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 1);
            }

            storiespush = (List<StoriesPush>)await repostorie.GetPushesByProjectIdAsync(int.Parse(IdProyecto));
            _pushGroups = grupospush.Select(g => new ForceGroupViewModel
            {
                Id = g.IdGroup,
                Name = g.GroupName,
                // Llenar la lista de fuerzas que ya pertenecen a este grupo
                ContainedForces = storiespush
                        .Where(p => p.Groups?.IdGroup == g.IdGroup)
                        .Select(p => new ForceItemViewModel
                        {
                            Id = p.PushesGroups.IdPush, 
                            Text = p.PushesGroups.PushName,
                            OriginStoryTitle = p.Stories.TitleStorie
                        })
                        .ToList()
            }).ToList();

            _unassignedPushes = storiespush
                    .Where(p => p.Groups == null)
                    .Select(p => new ForceItemViewModel
                    {
                        Id = p.PushesGroups.IdPush,
                        Text = p.PushesGroups.PushName,
                        OriginStoryTitle = p.Stories.TitleStorie
                    })
                    .ToList();

            storiespull = (List<StoriesPull>)await repostorie.GetPullsByProjectIdAsync(int.Parse(IdProyecto));
            _pullGroups = grupospull.Select(g => new ForceGroupViewModel
            {
                Id = g.IdGroup,
                Name = g.GroupName,
                // Llenar la lista de fuerzas que ya pertenecen a este grupo
                ContainedForces = storiespull
            .Where(p => p.Groups?.IdGroup == g.IdGroup)
            .Select(p => new ForceItemViewModel
            {
                Id = p.PullGroups.IdPull,
                Text = p.PullGroups.PullName,
                OriginStoryTitle = p.Stories.TitleStorie
            })
            .ToList()
            }).ToList();

            _unassignedPulls = storiespull
                    .Where(p => p.Groups == null)
                    .Select(p => new ForceItemViewModel
                    {
                        Id = p.PullGroups.IdPull,
                        Text = p.PullGroups.PullName,
                        OriginStoryTitle = p.Stories.TitleStorie
                    })
                    .ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarEntidad()
    {
        try
        {
            if (entidadActual.IdGroup == 0)
                await repository.CreateAsync(entidadActual);
            else
                await repository.UpdateAsync(entidadActual);

            grupospush = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 0);
            grupospull = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 1);

            mostrarFormulario = false;
            mensajeAlerta = "Grupo guardado exitosamente.";
            mostrarAlerta = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private void Regresar()
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyectos");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void MostrarMatriz(string id)
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyecsmatriz/{id}/{userrol}");
        }
        catch (Exception ex)
        {
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private async Task HandlePushDropped(MudItemDropInfo<ForceItemViewModel> dropInfo)
    {
        // 1. Encontrar la instancia real del ítem a mover (lógica del Playbook)
        var itemToMove = dropInfo.Item;
        var sourceList = FindListContainingItem(_unassignedPushes, _pushGroups, itemToMove.Id);
        if (sourceList == null) return;

        var itemInList = sourceList.FirstOrDefault(f => f.Id == itemToMove.Id);
        if (itemInList == null) return;

        // 2. Mover el ítem en la UI
        sourceList.Remove(itemInList);
        //dropInfo.DestinationCollection.Insert(dropInfo.IndexInZone, itemInList);

        // 3. Persistir en BBDD (usando la Fábrica)
        int? newGroupId = null;
        // var targetGroup = _pushGroups.FirstOrDefault(g => g.ContainedForces == dropInfo.DestinationCollection);
        // if (targetGroup != null)
        // {
        //     newGroupId = targetGroup.Id;
        // }

        try
        {
            // using (var context = _contextFactory.CreateDbContext())
            // {
            //     var storyPush = await context.StoriesPushes.FindAsync(itemInList.Id);
            //     if (storyPush != null)
            //     {
            //         storyPush.GroupId = newGroupId; // Asigna el nuevo ID de grupo (o null)
            //         await context.SaveChangesAsync();
            //     }
            // }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            // TODO: Revertir el movimiento en la UI si la BBDD falla
        }

        // 4. Notificar a Blazor (MudBlazor ya lo hace, pero StateHasChanged() asegura)
        StateHasChanged();
    }

    private async Task HandlePullDropped(MudItemDropInfo<ForceItemViewModel> dropInfo)
    {
        var itemToMove = dropInfo.Item;
        var sourceList = FindListContainingItem(_unassignedPulls, _pullGroups, itemToMove.Id);
        if (sourceList == null) return;

        var itemInList = sourceList.FirstOrDefault(f => f.Id == itemToMove.Id);
        if (itemInList == null) return;

        sourceList.Remove(itemInList);
        // dropInfo.DestinationCollection.Insert(dropInfo.IndexInZone, itemInList);

        // int? newGroupId = null;
        // var targetGroup = _pullGroups.FirstOrDefault(g => g.ContainedForces == dropInfo.DestinationCollection);
        // if (targetGroup != null)
        // {
        //     newGroupId = targetGroup.Id;
        // }

        try
        {
            // using (var context = _contextFactory.CreateDbContext())
            // {
            //     var storyPull = await context.StoriesPulls.FindAsync(itemInList.Id);
            //     if (storyPull != null)
            //     {
            //         storyPull.GroupId = newGroupId;
            //         await context.SaveChangesAsync();
            //     }
            // }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
        StateHasChanged();
    }

    private List<ForceItemViewModel> FindListContainingItem(
        List<ForceItemViewModel> unassignedList,
        List<ForceGroupViewModel> groupsList,
        int itemId)
    {
        if (unassignedList.Any(f => f.Id == itemId))
        {
            return unassignedList;
        }
        foreach (var group in groupsList)
        {
            if (group.ContainedForces.Any(f => f.Id == itemId))
            {
                return group.ContainedForces;
            }
        }
        return null;
    }

}
<style>
    body {
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
        font-size: 12px;
    }

    .list-container {
        border: 2px dashed #ccc;
        padding: 10px;
        margin: 10px;
        min-height: 150px;
        flex: 1;
    }

    .draggable-item {
        background-color: lightblue;
        border: 1px solid blue;
        padding: 5px;
        margin-bottom: 5px;
        cursor: grab;
    }
</style>
