@page "/proyect/proyectos"

@rendermode InteractiveServer
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using Jtbd.Webapp.Service
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Logging
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Proyectos> Logger
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Proyectos</PageTitle>

<div class="row align-content-center">
    <div class="col-lg-12">
        <h3 class="text-start mt-4">Gestión de proyectos</h3>
        @if (UserRol > 0 && UserRol < 3)
        {
            <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-primary" @onclick="MostrarFormulario" title="Agregar Proyecto">
                <i class="bi bi-plus-lg"></i> 
                </button>
            </div>
        }

        @if (mostrarAlerta)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @mensajeAlerta
                <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
            </div>
        }


        @if (proyectos is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!proyectos.Any())
        {
            <div class="alert alert-info text-center">No hay proyectos disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th>Fecha</th>
                        <th>Departamento</th>
                        <th>Categoría</th>
                        @* <th>Estatus</th> *@
                        <th> </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in proyectos.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.IdProject</td>
                            <td>@p.ProjectName</td>
                            <td>@p.ProjectDate</td>
                            <td>@p.Deparment.Name</td>
                            <td>@p.Categories.Name</td>
                            @* @switch (p.StatusProject)
                            {
                                case 0:
                                    <td>Inactivo</td>
                                    break;
                                case 1:
                                    <td>Activo</td>
                                    break;
                            } *@
                            <td width="25%" class="justify-content-end">
                                @if (UserRol > 0 && UserRol < 3)
                                {
                                    <button class="btn btn-success btn-sm me-2" title="Editar" @onclick="() => EditarEntidad(p)">
                                        <i class="bi bi-pencil"></i> 
                                    </button>
                                    <button class="btn btn-danger btn-sm me-2" title="Eliminar" @onclick="() => EliminarEntidad(p.IdProject)">
                                        <i class="bi bi-trash"></i> 
                                    </button>
                                }
                                <button class="btn btn-secondary btn-sm me-2" title="Agregar Entrevistados" @onclick="() => AgrgarEntrvistado(p.IdProject.ToString())">
                                    <i class="bi bi-person-add"></i> 
                                </button>
                                @* <button class="btn btn-secondary btn-sm me-2" title="Agregar Grupos" @onclick="() => AgrgarGrupos(p.IdProject.ToString())">
                                    <i class="bi bi-grid-1x2"></i>
                                </button> *@
                                <button class="btn btn-secondary btn-sm me-2" title="Agrupar Historias" @onclick="() => AgruparHistorias(p.IdProject.ToString())">
                                    <i class="bi bi-ui-checks"></i>
                                </button>
                                <button class="btn btn-secondary btn-sm me-2" title="Validar agrupación" @onclick="() => ValidarGrupos(p.IdProject.ToString())">
                                    <i class="bi bi-list-check"></i>
                                </button>
                                <button class="btn btn-secondary btn-sm me-2" title="Matriz Historias" @onclick="() => MostrarMatriz(p.IdProject.ToString())">
                                    <i class="bi bi-kanban"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(proyectoActual.IdProject == 0 ? "Agregar" : "Editar")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@proyectoActual" OnValidSubmit="GuardarEntidad">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="proyectoActual.ProjectName" />
                            <ValidationMessage For="@(() => proyectoActual.ProjectName)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha:</label>
                            <InputDate class="form-control" @bind-Value="proyectoActual.ProjectDate" />
                            <ValidationMessage For="@(() => proyectoActual.ProjectDate)" />
                        </div>
                        @if (UserRol == 1)
                        {
                            <div class="mb-3">
                                <label class="form-label">Departamentos:</label>
                                <InputSelect class="form-select" @bind-Value="proyectoActual.IdDeparmento">
                                    <option value="-1">-- Seleccione uno --</option>
                                    @foreach (var item in departamento)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => proyectoActual.IdDeparmento)" />
                            </div>
                        }
                        <div class="mb-3">
                            <label class="form-label">Categorías:</label>
                            <InputSelect class="form-select" @bind-Value="proyectoActual.idCategoria">
                                <option value="-1">-- Seleccione uno --</option>
                                @foreach (var item in categorias)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => proyectoActual.idCategoria)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripcion:</label>
                            <InputText class="form-control" @bind-Value="proyectoActual.ProjectDescription" />
                            <ValidationMessage For="@(() => proyectoActual.ProjectDescription)" />
                        </div>
                        @* <div class="mb-3">
                            <label class="form-label">Max Puches:</label>
                            <InputNumber class="form-control" @bind-Value="proyectoActual.MaxPushes" />
                            <ValidationMessage For="@(() => proyectoActual.MaxPushes)" />
                        </div> *@
                        @* <div class="mb-3">
                            <label class="form-label">Max Pulls:</label>
                            <InputNumber class="form-control" @bind-Value="proyectoActual.MaxPulls" />
                            <ValidationMessage For="@(() => proyectoActual.MaxPulls)" />
                        </div> *@
                        @* <div class="mb-3">
                            <label class="form-label">Estatus:</label>
                            <InputSelect class="form-select" @bind-Value="proyectoActual.StatusProject">
                                <option value="-1">-- Seleccione uno --</option>
                                <option value="1">Activo</option>
                                <option value="0">Inactivo</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => proyectoActual.StatusProject)" />
                        </div> *@
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="bi bi-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
@* <div>
    <table class="table table-striped table-hover">
        <thead class="table-secondary bg-opacity-25">
            <tr>
                <th>usernamelargo</th>
                <th>username</th>
                <th>UserRol</th>
                <th>UserDepart</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@usernamelargo</td>
                <td>@username</td>
                <td>@UserRol</td>
                <td>@UserDepart</td>
            </tr>
        </tbody>
    </table>
</div> *@

@code {
    private List<Deparments> departamento = new();
    private List<Categories> categorias = new();
    private List<Projects> proyectos = new();
    private CreateProject proyectoActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private string username = "dusa-user";
    private int UserRol = 5;
    private string usernamelargo = string.Empty;
    private int UserDepart = 0;

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IProjects repository { get; set; } = null!;
    [Inject] private IDeparments repodepart { get; set; } = null!;
    [Inject] private ICategories repocategoria { get; set; } = null!;
    [Inject] private IEmployee repouser { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                usernamelargo = authState.User.Identity.Name;
                username = authState.User.Identity.Name.Split(@"\")[1].Trim();
                Employee user = await repouser.GetByUsernameAsync(username);

                if (user != null)
                {
                    UserRol = user.EmployeeRol;
                    UserDepart = user.Deparments.Id;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }

        try
        {
            categorias = (List<Categories>)await repocategoria.GetAllAsync();

            if (UserRol == 1)
            {
                departamento = (List<Deparments>)await repodepart.GetAllAsync();
                proyectos = (List<Projects>)await repository.GetAllAsync();
            }
            else
            {
                int aux = (UserDepart == null ? -1 : int.Parse(UserDepart.ToString()));
                proyectos = (List<Projects>)await repository.GetByDeparmentIdAsync(aux);
            }
        }
        catch(Exception ex)
        {
            //Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private void MostrarFormulario()
    {
        try
        {
            proyectoActual = new CreateProject();
            if (UserRol == 1)
                proyectoActual.IdDeparmento = -1;
            else
            {
                int aux = (UserDepart == null ? -1 : int.Parse(UserDepart.ToString()));
                proyectoActual.IdDeparmento = aux;
            }
           
            proyectoActual.idCategoria = -1;
            proyectoActual.StatusProject = 1;
            proyectoActual.ProjectDate = DateTime.Now;
            proyectoActual.CreatedDate = DateTime.Now;
            proyectoActual.CreatedUser = username;
            proyectoActual.UpdatedDate = DateTime.Now;
            proyectoActual.UpdatedUser = username;

            mostrarFormulario = true;
        }
        catch (Exception ex)
        {
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private void EditarEntidad(Projects proyecto)
    {
        try
        {
            proyectoActual = new CreateProject
                {
                    IdProject = proyecto.IdProject,
                    ProjectName = proyecto.ProjectName,
                    ProjectDate = proyecto.ProjectDate,
                    IdDeparmento = proyecto.Deparment.Id,
                    idCategoria = proyecto.Categories.Id,
                    ProjectDescription = proyecto.ProjectDescription,
                    MaxPushes = proyecto.MaxPushes,
                    MaxPulls = proyecto.MaxPulls,
                    RutaImage = proyecto.RutaImage,
                    CreatedDate = proyecto.CreatedDate,
                    CreatedUser = proyecto.CreatedUser,
                    UpdatedDate = DateTime.Now,
                    UpdatedUser = username,
                    StatusProject = proyecto.StatusProject
                };
            mostrarFormulario = true;
        }
        catch(Exception ex)
        {
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private async Task GuardarEntidad()
    {
        try
        {
            if (proyectoActual.IdProject == 0)
                await repository.CreateAsync(proyectoActual);
            else
                await repository.UpdateAsync(proyectoActual);

            proyectos = (List<Projects>)await repository.GetAllAsync();
            mostrarFormulario = false;
            mensajeAlerta = "Proyecto guardado exitosamente.";
            mostrarAlerta = true;
        }
        catch(Exception ex)
        {
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private async Task EliminarEntidad(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
            if (confirmed)
            {
                await repository.DeleteAsync(id);
                proyectos = (List<Projects>)await repository.GetAllAsync();
                mensajeAlerta = "Proyecto eliminado exitosamente.";
                mostrarAlerta = true;
            }
        }
        catch (Exception ex)
        {
            mensajeAlerta = "No se puede eliminar el registros ya que existen relaciones con otras tablas que no han sido eliminadas.";
            mostrarAlerta = true;
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private void AgrgarEntrvistado(string id)
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/interview/{id}");
        }
        catch (Exception ex)
        {
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private void AgrgarGrupos(string id)
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyecsgroups/{id}");
        }
        catch (Exception ex)
        {
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private void AgruparHistorias(string id)
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyecsagrupar/{id}");
        }
        catch (Exception ex)
        {
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private void MostrarMatriz(string id)
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyecsmatriz/{id}");
        }
        catch (Exception ex)
        {
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }
    private void ValidarGrupos(string id)
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyecsvalidar/{id}");
        }
        catch (Exception ex)
        {
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }
}