@page "/proyect/proyecstories/{IdInter}/{userrol}"

@rendermode InteractiveServer
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using Jtbd.Webapp.Service
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Proyecstories> Logger
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Historias</PageTitle>
<div class="row align-content-center">
    <div class="col-lg-11">
        <div class="col-lg-11">
            <button class="btn btn-link btn-sm me-2 align-content-end" title="Regresar" @onclick="Regresar2">
                @(entrevistado.Project == null ? "-" : "Proyectos")  <i class="bi bi-arrow-return-left"></i>
            </button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <button class="btn btn-link btn-sm me-2 align-content-end" title="Regresar" @onclick="Regresar">
                @(entrevistado == null ? "-" : "Entrevistados")  <i class="bi bi-arrow-return-left"></i>
            </button>
            <h3 class="text-start mt-4">@(entrevistado == null ? "-" : entrevistado.InterName)@* Gestión de Historias *@</h3>
        </div>
    </div>
    <div class="col-lg-12">
        @if (int.Parse(userrol) > 0 && int.Parse(userrol) < 3)
        {
            <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-primary" title="Agregar Historia" @onclick="MostrarFormulario">
                <i class="bi bi-plus-lg"></i> 
                </button>
            </div>
        }

        @if (mostrarAlerta)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @mensajeAlerta
                <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
            </div>
        }


        @if (stories is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!stories.Any())
        {
            <div class="alert alert-info text-center">No hay historias disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th width="5%">#</th>
                        <th width="20%">Titulo</th>
                        <th width="55%">Contexto</th>
                        <th width="20%"> </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in stories.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td width="5%">@index</td>
                            <td width="20%">@p.TitleStorie</td>
                            <td width="55%">@p.ContextStorie</td>
                            <td width="20%" class="justify-content-end">
                                @if (int.Parse(userrol) > 0 && int.Parse(userrol) < 3)
                                {
                                    <button class="btn btn-success btn-sm me-1" title="Editar" @onclick="() => EditarEntidad(p)">
                                        <i class="bi bi-pencil"></i> 
                                    </button>
                                }
                                <button class="btn btn-secondary btn-sm  me-1" title="Catalogar" @onclick="() => AgrgarCaracteristicas(p.IdStorie.ToString())">
                                    <i class="bi bi-grid m-1"></i> 
                                </button>
                                @if (int.Parse(userrol) > 0 && int.Parse(userrol) < 3)
                                {
                                    <button class="btn btn-danger btn-sm me-1" title="Eliminar" @onclick="() => EliminarEntidad(p.IdStorie)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(entidadActual.IdStorie == 0 ? "Agregar" : "Editar")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@entidadActual" OnValidSubmit="GuardarEntidad">
                        <DataAnnotationsValidator />

                         <div class="mb-3">
                            <label class="form-label">Título:</label>
                            <InputText class="form-control" @bind-Value="entidadActual.TitleStorie" />
                            <ValidationMessage For="@(() => entidadActual.TitleStorie)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Contexto:</label>
                            <InputTextArea class="form-control" @bind-Value="entidadActual.ContextStorie" />
                            <ValidationMessage For="@(() => entidadActual.ContextStorie)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="bi bi-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string IdInter { get; set; }
    [Parameter]
    public string userrol { get; set; }

    private Interviews entrevistado = new();
    private List<Stories> stories = new();
    private CreateStorie entidadActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private string username = "dusa-user";

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IStories repository { get; set; } = null!;
    [Inject] private IInterviews repointer { get; set; } = null!;
    [Inject] private IEmployee repouser { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                username = authState.User.Identity.Name.Split(@"\")[1].Trim();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }

        try
        {
            entrevistado = (Interviews)await repointer.GetByIdAsync(int.Parse(IdInter));

            stories = (List<Stories>)await repository.GetByInterIdAsync(int.Parse(IdInter));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private void MostrarFormulario()
    {
        try
        {
            entidadActual = new CreateStorie();
            entidadActual.IdProject = entrevistado.Project.IdProject;
            entidadActual.IdInter = entrevistado.IdInter;
            entidadActual.CreatedDate = DateTime.Now;
            entidadActual.CreatedUser = username;
            entidadActual.UpdatedDate = DateTime.Now;
            entidadActual.UpdatedUser = username;

            mostrarFormulario = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void EditarEntidad(Stories entidad)
    {
        try
        {
            entidadActual = new CreateStorie
                {
                    IdStorie = entidad.IdStorie,
                    IdProject = entidad.Project.IdProject,
                    IdInter = entidad.IdInter.IdInter,
                    TitleStorie = entidad.TitleStorie,
                    ContextStorie = entidad.ContextStorie,
                    CreatedDate = entidad.CreatedDate,
                    CreatedUser = entidad.CreatedUser,
                    UpdatedDate = DateTime.Now,
                    UpdatedUser = username
            };

            mostrarFormulario = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarEntidad()
    {
        try
        {
            if (entidadActual.IdStorie == 0)
                await repository.CreateAsync(entidadActual);
            else
                await repository.UpdateAsync(entidadActual);

            stories = (List<Stories>)await repository.GetByInterIdAsync(int.Parse(IdInter));

            mostrarFormulario = false;
            mensajeAlerta = "Historia guardada exitosamente.";
            mostrarAlerta = true;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task EliminarEntidad(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
            if (confirmed)
            {
                await repository.DeleteAsync(id);
                stories = (List<Stories>)await repository.GetByInterIdAsync(int.Parse(IdInter));

                mensajeAlerta = "Historia eliminada exitosamente.";
                mostrarAlerta = true;
            }
        }
        catch (Exception ex)
        {
            mensajeAlerta = "No se puede eliminar el registros ya que existen relaciones con otras tablas que no han sido eliminadas.";
            mostrarAlerta = true;
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private async Task AgrgarCaracteristicas(string IdStorie)
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/detalle/{IdStorie}/{userrol}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Regresar()
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/interview/{entrevistado.Project.IdProject}/{userrol}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Regresar2()
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyectos");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }
}
