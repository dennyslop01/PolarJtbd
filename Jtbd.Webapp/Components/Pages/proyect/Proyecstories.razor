@page "/proyect/proyecstories"
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServer
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Proyecstories> Logger

<PageTitle>Historias</PageTitle>
<div class="row align-content-center">
    <div class="col-lg-6">
        <h3 class="text-center mt-4">Gestión de Historias</h3>
        <div class="d-flex justify-content-end mb-3">
            <button class="btn btn-primary" @onclick="MostrarFormulario">
                <i class="fas fa-plus"></i> Agregar Historia
            </button>
        </div>
        <EditForm Model="@Model">
            <div class="mb-3">
                <label class="form-label">Proyectos:</label>
                <InputSelect class="form-select" Value="Model.idProyecto" ValueChanged="@((int value) => OnProyectChanged(value))" ValueExpression="@(() => Model.idProyecto)">
                    <option value="-1">-- Seleccione uno --</option>
                    @foreach (var item in proyectos)
                    {
                        <option value="@item.IdProject">@item.ProjectName</option>
                    }
                </InputSelect>
            </div>
        </EditForm>

        @if (mostrarAlerta)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @mensajeAlerta
                <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
            </div>
        }


        @if (stories is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!stories.Any())
        {
            <div class="alert alert-info text-center">No hay historias disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Titulo</th>
                        <th>Entrevistado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in stories.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.IdStorie</td>
                            <td>@p.TitleStorie</td>
                            <td>@p.Interviews.InterName</td>
                            <td>
                                <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarEntidad(p)">
                                    <i class="fas fa-edit"></i> Editar
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarEntidad(p.IdStorie)">
                                    <i class="fas fa-trash"></i> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(entidadActual.IdStorie == 0 ? "Agregar" : "Editar")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@entidadActual" OnValidSubmit="GuardarEntidad">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Entrevistado:</label>
                            <InputSelect class="form-select" @bind-Value="entidadActual.IdInter">
                                <option value="-1">-- Seleccione uno --</option>
                                @foreach (var item in entrevistados)
                                {
                                    <option value="@item.IdInter">@item.InterName</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Título:</label>
                            <InputText class="form-control" @bind-Value="entidadActual.TitleStorie" />
                            <ValidationMessage For="@(() => entidadActual.TitleStorie)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripcion:</label>
                            <InputTextArea class="form-control" @bind-Value="entidadActual.ContextStorie" />
                            <ValidationMessage For="@(() => entidadActual.ContextStorie)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public class Proyecto
    {
        public int idProyecto { get; set; }
    }

    public Proyecto Model { get; set; } = new Proyecto();
    private List<Projects> proyectos = new();
    private List<Interviews> entrevistados = new();
    private List<Stories> stories = new();
    private CreateStorie entidadActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private string username = string.Empty;

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IStories repository { get; set; } = null!;
    [Inject] private IProjects repoproyec { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var session = HttpContextAccessor.HttpContext.Session;
            username = session.GetString("WindowsUser");

            proyectos = (List<Projects>)await repoproyec.GetAllAsync();
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void MostrarFormulario()
    {
        try
        {
            if (Model.idProyecto > 0)
            {
                entidadActual = new CreateStorie();
                entidadActual.IdProject = Model.idProyecto;
                entidadActual.IdInter = -1;
                entidadActual.CreatedDate = DateTime.Now;
                entidadActual.CreatedUser = username;
                entidadActual.UpdatedDate = DateTime.Now;
                entidadActual.UpdatedUser = username;

                mostrarFormulario = true;
            }
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void EditarEntidad(Stories entidad)
    {
        try
        {
            if (Model.idProyecto > 0)
            {
                entidadActual = new CreateStorie
                    {
                        IdProject = entidad.Project.IdProject,
                        IdInter = entidad.Interviews.IdInter,
                        TitleStorie = entidad.TitleStorie,
                        ContextStorie = entidad.ContextStorie,
                        CreatedDate = entidad.CreatedDate,
                        CreatedUser = entidad.CreatedUser,
                        UpdatedDate = DateTime.Now,
                        UpdatedUser = username
                    };
                mostrarFormulario = true;
            }
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarEntidad()
    {
        try
        {
            if (entidadActual.IdStorie == 0)
                await repository.CreateAsync(entidadActual);
            else
                await repository.UpdateAsync(entidadActual);

            stories = (List<Stories>)await repository.GetAllAsync();

            mostrarFormulario = false;
            mensajeAlerta = "Historia guardada exitosamente.";
            mostrarAlerta = true;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task EliminarEntidad(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
            if (confirmed)
            {
                await repository.DeleteAsync(id);
                stories = (List<Stories>)await repository.GetAllAsync();

                mensajeAlerta = "Historia eliminada exitosamente.";
                mostrarAlerta = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private async Task OnProyectChanged(int value)
    {
        try
        {
            Model.idProyecto = value;
        stories = (List<Stories>)await repository.GetAllAsync();
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }
}
