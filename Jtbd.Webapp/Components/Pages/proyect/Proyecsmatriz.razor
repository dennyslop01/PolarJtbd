@page "/proyect/proyecsmatriz/{IdProyecto}/{userrol}"

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using System.Text
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Proyecstories> Logger
@inject AuthenticationStateProvider authenticationStateProvider


<PageTitle>Historias</PageTitle>
<div class="row align-content-center">
    <div class="col-lg-11">
        <div class="col-lg-11">
            <button class="btn btn-link btn-sm me-2 align-content-end" title="Regresar" @onclick="Regresar2">
                @(proyecto == null ? "-" : "Proyectos")  <i class="bi bi-arrow-return-left"></i>
            </button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <h3 class="text-start mt-4">Matriz de Historias y Grupos</h3>
            <div class="col-lg-12">
                <h3 class="text-start mt-4">Gestión de proyectos</h3>
                <div class="d-flex justify-content-end mb-3">
                    <button class="btn btn-primary" @onclick="MostrarFormulario" title="Descargar CSV">
                        <i class="bi bi-filetype-csv"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-10">
        @if (mostrarAlerta)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @mensajeAlerta
                <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
            </div>
        }

        @if (grupospush is null && grupospull is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!grupospush.Any() && !grupospull.Any())
        {
            <div class="alert alert-info text-center">No hay datos disponibles.</div>
        }
        else
        {
            <div class="row align-content-center">
                <table class="table table-striped table-hover">
                    <thead class="table-secondary bg-opacity-25">
                        <tr>
                            <th>&nbsp;&nbsp;</th>
                            @foreach (var (p, index) in grupospush.Select((p, i) => (p, i + 1)))
                            {
                                if (p.GroupName != "Leftovers")
                                {
                                    <th style="vertical-align: middle;">Push</th>
                                }
                            }

                            @foreach (var (p, index) in grupospull.Select((p, i) => (p, i + 1)))
                            {
                                if (p.GroupName != "Leftovers")
                                {
                                    <th style="vertical-align: middle;">Pull</th>
                                }
                            }
                        </tr>
                        <tr>
                            <th>&nbsp;&nbsp;</th>
                            @foreach (var (p, index) in grupospush.Select((p, i) => (p, i + 1)))
                            {
                                if (p.GroupName != "Leftovers")
                                {
                                    <th style="vertical-align: middle;">@p.GroupName</th>
                                }
                            }

                            @foreach (var (p, index) in grupospull.Select((p, i) => (p, i + 1)))
                            {
                                if (p.GroupName != "Leftovers")
                                {
                                    <th style="vertical-align: middle;">@p.GroupName</th>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody class="text-center">
                        @foreach (var (p, index) in stories.Select((p, i) => (p, i + 1)))
                        {
                            <tr>
                                <td>@p.IdInter.InterName - @p.TitleStorie</td>
                                @foreach (var (p1, index1) in grupospush.Select((p, i) => (p, i + 1)))
                                {
                                    try
                                    {
                                        if (p1.GroupName != "Leftovers")
                                        {
                                            var entidad = storiespush.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups?.IdGroup == p1.IdGroup).FirstOrDefault();
                                            if (entidad == null)
                                            {
                                                <td>
                                                    <button type="button" class="btn btn-light" title="Editar" @onclick="() => EditarEntidad(p.IdStorie, p1.IdGroup)">-</button>
                                                </td>
                                            }
                                            else
                                            {
                                                @if (entidad.ValorPush == 1)
                                                {
                                                    <td>
                                                        <button type="button" class="btn btn-success" title="Editar" @onclick="() => EditarEntidad(p.IdStorie, p1.IdGroup)">1</button>
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        <button type="button" class="btn btn-light" title="Editar" @onclick="() => EditarEntidad(p.IdStorie, p1.IdGroup)">0</button>
                                                    </td>
                                                }
                                            }
                                        }
                                    }
                                    catch { }
                                }

                                @foreach (var (p1, index1) in grupospull.Select((p, i) => (p, i + 1)))
                                {
                                    try
                                    {
                                        if (p1.GroupName != "Leftovers")
                                        {
                                            var entidad = storiespull.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups?.IdGroup == p1.IdGroup).FirstOrDefault();
                                            if (entidad == null)
                                            {
                                                <td>
                                                    <button type="button" class="btn btn-light" title="Editar" @onclick="() => EditarEntidad(p.IdStorie, p1.IdGroup)">-</button>
                                                </td>
                                            }
                                            else
                                            {
                                                @if (entidad.ValorPull == 1)
                                                {
                                                    <td>
                                                        <button type="button" class="btn btn-success" title="Editar" @onclick="() => EditarEntidad(p.IdStorie, p1.IdGroup)">1</button>
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>
                                                        <button type="button" class="btn btn-light" title="Editar" @onclick="() => EditarEntidad(p.IdStorie, p1.IdGroup)">0</button>
                                                    </td>
                                                }
                                            }
                                        }
                                    }
                                    catch { }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <br />
        }
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Generar CSV</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="entidadActual" OnValidSubmit="GuardarEntidad">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Separador:</label>
                            <InputSelect class="form-select" @bind-Value="entidadActual.TipoSeparador">
                                <option value="-1">-- Seleccione uno --</option>
                                <option value="1">Coma</option>
                                <option value="2">Punto y Coma</option>
                                @* <option value="3">Tabulador</option> *@
                            </InputSelect>
                            <ValidationMessage For="@(() => entidadActual.TipoSeparador)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="bi bi-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarFormulario2)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(entidadValidar.IdStorie == 0 ? "Agregar" : "Editar") @entidadValidar.Tipo</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="entidadValidar" OnValidSubmit="GuardarEntidad2">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">¿La historia @entidadValidar.Nombre está relacionada a este grupo titulado @entidadValidar.Grupos?</label>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Contexto</strong></label>
                            <br />
                            <label class="form-label">@entidadValidar.Contexto</label>
                        </div>
                        @if (!string.IsNullOrEmpty(entidadValidar.Pushes))
                        {
                            <div class="mb-3">
                                <label class="form-label"><strong>Push</strong></label>
                                <br />
                                <label class="form-label">@entidadValidar.Pushes</label>  
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(entidadValidar.Pulls))
                        {
                            <div class="mb-3">
                                <label class="form-label"><strong>Pull</strong></label>
                                <br />
                                <label class="form-label">@entidadValidar.Pulls</label>
                            </div>
                        }
                        <div class="mb-3">
                            <label class="form-label"><strong>Hábitos</strong></label>
                            <br />
                            <label class="form-label">@entidadValidar.Habits</label>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Ansiedades</strong></label>
                            <br />
                            <label class="form-label">@entidadValidar.Anxieties</label>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Respuesta:</label>
                            <InputSelect class="form-select" @bind-Value="entidadValidar.ValorSeleccionado">
                                <option value="-1">-- Seleccione uno --</option>
                                <option value="1">Si</option>
                                <option value="2">No</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => entidadValidar.ValorSeleccionado)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            @* <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button> *@
                            <button type="button" class="btn btn-secondary me-2" @onclick="() => Siguiente(-1)">
                                <i class="bi bi-chevron-double-left"></i> Anterior
                            </button>
                            <button type="button" class="btn btn-primary me-2" @onclick="() => Siguiente(1)">
                                <i class="bi bi-chevron-double-right"></i> Siguiente
                            </button>

                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string IdProyecto { get; set; }
    [Parameter]
    public string userrol { get; set; }


    private List<Tabla> registros = new();
    private List<Stories> stories = new(); 
    private List<Groups> grupospush = new();
    private List<Groups> grupospull = new();
    private List<StoriesGroupsPulls> storiespull = new();
    private List<StoriesGroupsPushes> storiespush = new();
    private List<StoriesPush> pushstorie = new();
    private List<StoriesPull> pullstorie = new();
    private List<StoriesHabbit> habitstorie = new();
    private List<StoriesAnxiety> anxiestorie = new();
    private Tabla entidadValidar = new();
    private Projects proyecto = new();
    private MatrizCSV entidadActual = new();

    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private bool mostrarFormulario = false;
    private bool mostrarFormulario2 = false;
    private int indexGral = 0;

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IStories repository { get; set; } = null!;
    [Inject] private IProjects repoproyect { get; set; } = null!;
    [Inject] private IGroups repogroups { get; set; } = null!;
    [Inject] private IEmployee repouser { get; set; } = null!;
    [Inject] private IPushesGroups repopush { get; set; } = null!;
    [Inject] private IPullGroups repopull { get; set; } = null!;
    [Inject] private IHabits repohabi { get; set; } = null!;
    [Inject] private IAnxieties repoanxie { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            proyecto = (Projects)await repoproyect.GetByIdAsync(int.Parse(IdProyecto));
            await CargarDatos();

        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private async Task CargarDatos()
    {
        try
        {
            proyecto = (Projects)await repoproyect.GetByIdAsync(int.Parse(IdProyecto));
            grupospush = (List<Groups>)await repogroups.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 0);
            grupospull = (List<Groups>)await repogroups.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 1);
            stories = (List<Stories>)await repository.GetByProjectIdAsync(int.Parse(IdProyecto));

            storiespull = (List<StoriesGroupsPulls>)await repository.GetStorieGroupPullsByProjectIdAsync(int.Parse(IdProyecto));
            storiespush = (List<StoriesGroupsPushes>)await repository.GetStorieGroupPushesByProjectIdAsync(int.Parse(IdProyecto));

            registros = new List<Tabla>();
            foreach (Stories item in stories)
            {
                string habit = string.Empty;
                string anxie = string.Empty;

                pushstorie = (List<StoriesPush>)await repository.GetPushesByStorieIdAsync(item.IdStorie);
                pullstorie = (List<StoriesPull>)await repository.GetPullsByStorieIdAsync(item.IdStorie);
                habitstorie = (List<StoriesHabbit>)await repository.GetHabitsByStorieIdAsync(item.IdStorie);
                anxiestorie = (List<StoriesAnxiety>)await repository.GetAxieByStorieIdAsync(item.IdStorie);

                string pushs = string.Empty;
                string pull = string.Empty;

                foreach (var p in pushstorie)
                {
                    pushs += $"{p.PushesGroups.PushName}, ";
                }
                foreach (var p in pullstorie)
                {
                    pull += $"{p.PullGroups.PullName}, ";
                }
                foreach (var p in habitstorie)
                {
                    habit += $"{p.Habits.HabitName}, ";
                }
                foreach (var p in anxiestorie)
                {
                    anxie += $"{p.Anxieties.AnxieName}, ";
                }

                foreach (Groups grp in grupospush)
                {
                    if (grp.GroupName != "Leftovers")
                    {
                        // string pushs = string.Empty;
                        // string pull = string.Empty;
                        int? valor = null;

                        foreach (StoriesGroupsPushes val in storiespush.Where(x => x.Stories?.IdStorie == item.IdStorie && x.Groups?.IdGroup == grp.IdGroup))
                        {
                            valor = val.ValorPush;
                        }

                        // foreach (StoriesPush p in pushstorie.Where(x => x.Stories?.IdStorie == item.IdStorie && x.Groups?.IdGroup == grp.IdGroup))
                        // {
                        //     pushs += $"{p.PushesGroups.PushName}, ";
                        // }

                        // foreach (StoriesPull p in pullstorie.Where(x => x.Stories?.IdStorie == item.IdStorie && x.Groups?.IdGroup == grp.IdGroup))
                        // {
                        //     pull += $"{p.PullGroups.PullName}, ";
                        // }

                        Tabla tabla = new Tabla()
                        {
                            IdStorie = item.IdStorie,
                            Nombre = $"{item.TitleStorie} - {item.IdInter.InterName}",
                            Contexto = item.ContextStorie,
                            Tipo = "Push",
                            Pushes = pushs,
                            Pulls = pull,
                            Habits = habit,
                            Anxieties = anxie,
                            IdGroup = grp.IdGroup,
                            Grupos = grp.GroupName,
                            Valor = (valor == null ? "-" : (valor == 1 ? "Si" : "No"))
                        };
                        registros.Add(tabla);
                    }
                }

                foreach (Groups grp in grupospull)
                {
                    if (grp.GroupName != "Leftovers")
                    {
                        // string pushs = string.Empty;
                        // string pull = string.Empty;
                        int? valor = null;

                        foreach (StoriesGroupsPulls push in storiespull.Where(x => x.Stories?.IdStorie == item.IdStorie && x.Groups?.IdGroup == grp.IdGroup))
                        {
                            valor = push.ValorPull;
                        }

                        // foreach (StoriesPush p in pushstorie.Where(x => x.Stories?.IdStorie == item.IdStorie && x.Groups?.IdGroup == grp.IdGroup))
                        // {
                        //     pushs += $"{p.PushesGroups.PushName}, ";
                        // }

                        // foreach (StoriesPull p in pullstorie.Where(x => x.Stories?.IdStorie == item.IdStorie && x.Groups?.IdGroup == grp.IdGroup))
                        // {
                        //     pull += $"{p.PullGroups.PullName}, ";
                        // }

                        Tabla tabla = new Tabla()
                        {
                            IdStorie = item.IdStorie,
                            Nombre = $"{item.TitleStorie} - {item.IdInter.InterName}",
                            Contexto = item.ContextStorie,
                            Tipo = "Pull",
                            Pushes = pushs,
                            Pulls = pull,
                            Habits = habit,
                            Anxieties = anxie,
                            IdGroup = grp.IdGroup,
                            Grupos = grp.GroupName,
                            Valor = (valor == null ? "-" : (valor == 1 ? "Si" : "No"))
                        };
                        registros.Add(tabla);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Regresar2()
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyectos");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void MostrarFormulario()
    {
        try
        {
            entidadActual = new MatrizCSV();
            entidadActual.TipoSeparador = -1;
            mostrarFormulario = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarEntidad()
    {
        try
        {
            string separador = string.Empty;

            switch(entidadActual.TipoSeparador)
            {
                case 1:
                    separador = ",";
                    break;
                case 2:
                    separador = ";";
                    break;
                case 3:
                    separador = @"\t";
                    break;
            }

            mostrarFormulario = false;
            await ExportarCsv(separador);
            mensajeAlerta = "Archivo generado exitosamente.";
            mostrarAlerta = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
        mostrarFormulario2 = false;
    }

    private async Task ExportarCsv(string separador)
    {
        try
        {
            var csvString = GenerarCsv(separador); // Implementa esta función para formatear los datos
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", $"matriz-{proyecto.ProjectName}.csv", csvString);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private string GenerarCsv(string separador)
    {
        try
        {
            // Lógica para construir la cadena CSV
            var sb = new StringBuilder();

            int i = 0;
            string encabezado = $" {separador}";
            foreach (var p in grupospush)
            {
                if (p.GroupName != "Leftovers")
                {
                    encabezado += $"Push - {p.GroupName}{separador}";
                }
            }

            foreach (var p in grupospull)
            {
                if (p.GroupName != "Leftovers")
                {
                    encabezado += $"Pull - {p.GroupName}{separador}";
                }
            }
            sb.AppendLine(encabezado); // Encabezados

            string linea = string.Empty;

            foreach (var p in stories)
            {
                linea = $"{p.IdInter.InterName} - {p.TitleStorie}{separador}";

                foreach (var p1 in grupospush)
                {
                    try
                    {
                        if (p1.GroupName != "Leftovers")
                        {
                            var entidad = storiespush.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups?.IdGroup == p1.IdGroup).FirstOrDefault();
                            if (entidad == null)
                            {
                                linea += $"-{separador}";
                            }
                            else
                            {
                                @if (entidad.ValorPush == 1)
                                {
                                    linea += $"1{separador}";
                                }
                                else
                                {
                                    linea += $"0{separador}";
                                }
                            }
                        }
                    }
                    catch { }
                }
                foreach (var p1 in grupospull)
                {
                    try
                    {
                        if (p1.GroupName != "Leftovers")
                        {
                            var entidad = storiespull.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups?.IdGroup == p1.IdGroup).FirstOrDefault();
                            if (entidad == null)
                            {
                                linea += $"-{separador}";
                            }
                            else
                            {
                                @if (entidad.ValorPull == 1)
                                {
                                    linea += $"1{separador}";
                                }
                                else
                                {
                                    linea += $"0{separador}";
                                }
                            }
                        }
                    }
                    catch { }
                }
                sb.AppendLine(linea); //Lineas
            }

            return sb.ToString();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
        return null;
    }

    private async Task Siguiente(int opcion)
    {
        if (entidadValidar.ValorSeleccionado != -1) 
            await GuardarEntidad2();

        mostrarFormulario2 = false;
        indexGral+= opcion;
        if(indexGral > -1)
        {
            if (indexGral < registros.Count)
                EditarEntidad(registros[indexGral].IdStorie, registros[indexGral].IdGroup);
        }
    }

    private void EditarEntidad(int idstorie, int idgroup)
    {
        try
        {
            int index = registros.FindIndex(x => x.IdStorie == idstorie && x.IdGroup == idgroup);
            indexGral = index;

            if (int.Parse(userrol) > 0 && int.Parse(userrol) < 3)
            {
                if (index <= registros.Count)
                    indexGral = index;

                Tabla? tabla = registros.Where(x => x.IdStorie == idstorie && x.IdGroup == idgroup).FirstOrDefault();
                if (tabla != null)
                {
                    int valor = -1;
                    switch (tabla.Valor)
                    {
                        case "Si":
                            valor = 1;
                            break;
                        case "No":
                            valor = 2;
                            break;
                    }

                    entidadValidar = new Tabla
                    {
                        IdStorie = tabla.IdStorie,
                        Tipo = tabla.Tipo,
                        Nombre = tabla.Nombre,
                        Contexto = tabla.Contexto,
                        IdGroup = tabla.IdGroup,
                        Pushes = tabla.Pushes,
                        Pulls = tabla.Pulls,
                        Habits = tabla.Habits,
                        Anxieties = tabla.Anxieties,
                        Grupos = tabla.Grupos,
                        ValorSeleccionado = valor,
                        Valor = tabla.Valor
                    };
                    mostrarFormulario2 = true;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private async Task GuardarEntidad2()
    {
        try
        {
            if (entidadValidar.ValorSeleccionado != -1)
                await repository.UpdateStorieValorAsync(entidadValidar.IdStorie, entidadValidar.IdGroup, (entidadValidar.Tipo == "Push" ? 1 : 2), (entidadValidar.ValorSeleccionado == 2 ? 0 : 1));

            await CargarDatos();
            mostrarFormulario2 = false;
            // mensajeAlerta = "Valor guardado exitosamente.";
            // mostrarAlerta = true;

            // indexGral++;
            // if (indexGral < registros.Count)
            //     EditarEntidad(registros[indexGral].IdStorie, registros[indexGral].IdGroup);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            // mensajeAlerta = ex.Message;
            // mostrarAlerta = true;
            // mostrarFormulario2 = false;
        }
    }
}
<style>
    body {
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
        font-size: 12px;
    }
</style>
<script>
    function downloadFileFromStream(fileName, content) {
        const blob = new Blob([content], { type: "text/csv;charset=utf-8" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = fileName;
        a.click();
        URL.revokeObjectURL(url);
    }
</script>