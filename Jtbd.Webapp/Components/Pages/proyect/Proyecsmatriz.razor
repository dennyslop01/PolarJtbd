@page "/proyect/proyecsmatriz/{IdProyecto}"

@rendermode InteractiveServer
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using System.Text
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Proyecstories> Logger


<PageTitle>Historias</PageTitle>
<div class="row align-content-center">
    <div class="col-lg-11">
        <div class="col-lg-11">
            <button class="btn btn-link btn-sm me-2 align-content-end" title="Regresar" @onclick="Regresar2">
                @(proyecto == null ? "-" : proyecto.ProjectName)  <i class="bi bi-arrow-return-left"></i>
            </button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <h3 class="text-center mt-4">Matriz de Historias y Grupos</h3>
            <div class="col-lg-12">
                <h3 class="text-center mt-4">Gestión de proyectos</h3>
                <div class="d-flex justify-content-end mb-3">
                    <button class="btn btn-primary" @onclick="MostrarFormulario" title="Descargar CSV">
                        <i class="bi bi-filetype-csv"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-10">
        @if (mostrarAlerta)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @mensajeAlerta
                <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
            </div>
        }


        @if (storiespull is null && storiespush is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!storiespull.Any() && !storiespush.Any())
        {
            <div class="alert alert-info text-center">No hay datos disponibles.</div>
        }
        else
        {
            <div class="row align-content-center">
                <table class="table table-striped table-hover text-center">
                    <thead class="table-secondary bg-opacity-25">
                        <tr>
                            <th>&nbsp;&nbsp;</th>
                            @foreach (var (p, index) in grupos.Select((p, i) => (p, i + 1)))
                            {
                                <th>Push</th>
                            }
                            @* <th>Sin</th> *@

                            @foreach (var (p, index) in grupos.Select((p, i) => (p, i + 1)))
                            {
                                <th>Pull</th>
                            }
                            @* <th>Sin</th> *@
                        </tr>
                        <tr>
                            <th>&nbsp;&nbsp;</th>
                            @foreach (var (p, index) in grupos.Select((p, i) => (p, i + 1)))
                            {
                                <th>@p.GroupName</th>
                            }
                            @* <th>Asignar</th> *@

                            @foreach (var (p, index) in grupos.Select((p, i) => (p, i + 1)))
                            {
                                <th>@p.GroupName</th>
                            }
                            @* <th>Asignar</th> *@
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (p, index) in stories.Select((p, i) => (p, i + 1)))
                        {
                            <tr>
                                <td>@p.IdInter.InterName - @p.TitleStorie</td>
                                @foreach (var (p1, index1) in grupos.Select((p, i) => (p, i + 1)))
                                {
                                    try
                                    {
                                        int contador = storiespush.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups?.IdGroup == p1.IdGroup).Count();
                                        if (contador > 0)
                                        {
                                            <td>
                                                <button type="button" class="btn btn-success">1</button>
                                            </td>
                                        }
                                        else
                                        {
                                            @if (storiespush.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups == null).Count() > 0)
                                            {
                                                <td>-</td>
                                            }
                                            else
                                            {
                                                <td>0</td>
                                            }
                                        }
                                    }
                                    catch { }
                                }                                
                                @* @if (storiespush.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups == null).Count() > 0)
                                {
                                    <td>-</td>
                                }
                                else
                                {
                                    <td>-</td>
                                } *@

                                @foreach (var (p1, index1) in grupos.Select((p, i) => (p, i + 1)))
                                {
                                    try
                                    {
                                        int contador = storiespull.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups?.IdGroup == p1.IdGroup).Count();
                                        if (contador > 0)
                                        {
                                            <td>
                                                <button type="button" class="btn btn-success">1</button>
                                            </td>
                                        }
                                        else
                                        {
                                            @if (storiespull.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups == null).Count() > 0)
                                            {
                                                <td>-</td>
                                            }
                                            else
                                            {
                                                <td>0</td>
                                            }
                                        }
                                    }
                                    catch { }
                                }
                                @* @if (storiespull.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups == null).Count() > 0)
                                {
                                    <td>-</td>
                                }
                                else
                                {
                                    <td>-</td>
                                } *@
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <br />
        }
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Generar CSV</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="entidadActual" OnValidSubmit="GuardarEntidad">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Separador:</label>
                            <InputSelect class="form-select" @bind-Value="entidadActual.TipoSeparador">
                                <option value="-1">-- Seleccione uno --</option>
                                <option value="1">Coma</option>
                                <option value="2">Punto y Coma</option>
                                @* <option value="3">Tabulador</option> *@
                            </InputSelect>
                            <ValidationMessage For="@(() => entidadActual.TipoSeparador)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="bi bi-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string IdProyecto { get; set; }

    private class MatrizCSV()
    {
        [Range(0, 1000, ErrorMessage = "El tipo separador es obligatorio.")]
        public int TipoSeparador { get; set; }
    }

    private List<Stories> stories = new(); 
    private List<Groups> grupos = new();
    private List<StoriesPull> storiespull = new();
    private List<StoriesPush> storiespush = new();
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private bool mostrarFormulario = false;

    private Projects proyecto = new();
    private MatrizCSV entidadActual = new();

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IStories repository { get; set; } = null!;
    [Inject] private IProjects repoproyect { get; set; } = null!;
    [Inject] private IGroups repogroups { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            proyecto = (Projects)await repoproyect.GetByIdAsync(int.Parse(IdProyecto));
            grupos = (List<Groups>)await repogroups.GetByProjectIdAsync(int.Parse(IdProyecto));
            stories = (List<Stories>)await repository.GetByProjectIdAsync(int.Parse(IdProyecto));

            storiespull = (List<StoriesPull>)await repository.GetPullsByProjectIdAsync(int.Parse(IdProyecto));
            storiespush = (List<StoriesPush>)await repository.GetPushesByProjectIdAsync(int.Parse(IdProyecto));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Regresar2()
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyectos");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void MostrarFormulario()
    {
        try
        {
            entidadActual = new MatrizCSV();
            entidadActual.TipoSeparador = -1;
            mostrarFormulario = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarEntidad()
    {
        try
        {
            string separador = string.Empty;

            switch(entidadActual.TipoSeparador)
            {
                case 1:
                    separador = ",";
                    break;
                case 2:
                    separador = ";";
                    break;
                case 3:
                    separador = @"\t";
                    break;
            }

            mostrarFormulario = false;
            await ExportarCsv(separador);
            mensajeAlerta = "Archivo generado exitosamente.";
            mostrarAlerta = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private async Task ExportarCsv(string separador)
    {
        try
        {
            var csvString = GenerarCsv(separador); // Implementa esta función para formatear los datos
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", $"matriz-{proyecto.ProjectName}.csv", csvString);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private string GenerarCsv(string separador)
    {
        try
        {
            // Lógica para construir la cadena CSV
            var sb = new StringBuilder();

            int i = 0;
            string encabezado = $" {separador}";
            foreach (var p in grupos)
            {
                encabezado += $"Push - {p.GroupName}{separador}";
            }

            foreach (var p in grupos)
            {
                encabezado += $"Pull - {p.GroupName}{separador}";
            }
            sb.AppendLine(encabezado); // Encabezados

            string linea = string.Empty;

            foreach (var p in stories)
            {
                linea = $"{p.IdInter.InterName} - {p.TitleStorie}{separador}";

                foreach (var p1 in grupos)
                {
                    try
                    {
                        int contador = storiespush.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups?.IdGroup == p1.IdGroup).Count();
                        if (contador > 0)
                        {
                            linea += $"1{separador}";
                        }
                        else
                        {
                            if (storiespush.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups == null).Count() > 0)
                            {
                                linea += $"-{separador}";
                            }
                            else
                            {
                                linea += $"0{separador}";
                            }
                        }
                    }
                    catch { }
                }
                foreach (var p1 in grupos)
                {
                    try
                    {
                        int contador = storiespull.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups?.IdGroup == p1.IdGroup).Count();
                        if (contador > 0)
                        {
                            linea += $"1{separador}";
                        }
                        else
                        {
                            if (storiespull.Where(c => c.Stories?.IdStorie == p.IdStorie && c.Groups == null).Count() > 0)
                            {
                                linea += $"-{separador}";
                            }
                            else
                            {
                                linea += $"0{separador}";
                            }
                        }
                    }
                    catch { }
                }
                sb.AppendLine(linea); //Lineas
            }

            return sb.ToString();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
        return null;
    }
}

<script>
    function downloadFileFromStream(fileName, content) {
        const blob = new Blob([content], { type: "text/csv;charset=utf-8" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = fileName;
        a.click();
        URL.revokeObjectURL(url);
    }
</script>