@page "/proyect/interview/{IdProyecto}"
@rendermode InteractiveServer
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Interview> Logger
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Entrevistados</PageTitle>
<div class="row align-content-center">
    <div class="col-lg-12">
        <div class="col-lg-11">
            <button class="btn btn-link btn-sm me-2 align-content-end" title="Regresar" @onclick="Regresar">
                @(proyecto == null ? "-" : proyecto.ProjectName)  <i class="bi bi-arrow-return-left"></i>
            </button>
        </div>
        <h3 class="text-start mt-4">Gestión de Entrevistados</h3>
        @if (UserRol > 0 && UserRol < 3)
        {
            <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-primary" title="Agregar Entrevistado" @onclick="MostrarFormulario">
                <i class="bi bi-plus-lg"></i> 
                </button>
            </div>
        }

        @if (mostrarAlerta)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @mensajeAlerta
                <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
            </div>
        }


        @if (entrevistados is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!entrevistados.Any())
        {
            <div class="alert alert-info text-center">No hay entrevistados disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table table-secondary bg-opacity-25">
                    <tr>
                        <th width="5%">#</th>
                        <th width="15%">Nombre</th>
                        <th width="10%">Edad</th>
                        <th width="10%">Sexo</th>
                        <th width="10%">Ocupación</th>
                        <th width="10%">Nickname</th>
                        <th width="10%">NSE</th>
                        <th width="10%">Fecha Entrevista</th>
                        <th width="20%"> </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in entrevistados.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td width="5%">@p.IdInter</td>
                            <td width="15%">@p.InterName</td>
                            <td width="10%">@p.InterAge</td>
                            @switch (p.InterGender)
                            {
                                case 1:
                                    <td width="10%">Masculino</td>
                                    break;
                                case 2:
                                    <td width="10%">Femenino</td>
                                    break;
                            }
                            <td width="10%">@p.InterOccupation</td>
                            <td width="10%">@p.InterNickname</td>
                            <td width="10%">@p.InterNSE</td>
                            <td width="10%">@p.DateInter</td>
                            <td width="20%" class="justify-content-end">
                                @if (UserRol > 0 && UserRol < 3)
                                {
                                    <button class="btn btn-success btn-sm me-1" title="Editar" @onclick="() => EditarEntidad(p)">
                                        <i class="bi bi-pencil"></i> 
                                    </button>
                                    <button class="btn btn-danger btn-sm me-1" title="Eliminar" @onclick="() => EliminarEntidad(p.IdInter)">
                                        <i class="bi bi-trash"></i> 
                                    </button>
                                }
                                <button class="btn btn-secondary btn-sm" title="Historias" @onclick="() => AgrgarHistorias(p.IdInter.ToString())">
                                    <i class="bi bi-list-columns-reverse"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(entrevistadoActual.IdInter == 0 ? "Agregar" : "Editar")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="entrevistadoActual" OnValidSubmit="GuardarEntidad">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="entrevistadoActual.InterName" />
                            <ValidationMessage For="@(() => entrevistadoActual.InterName)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Edad:</label>
                            <InputNumber class="form-control" @bind-Value="entrevistadoActual.InterAge" />
                            <ValidationMessage For="@(() => entrevistadoActual.InterAge)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Sexo:</label>
                            <InputSelect class="form-select" @bind-Value="entrevistadoActual.InterGender">
                                <option value="-1">-- Seleccione uno --</option>
                                <option value="1">Masculino</option>
                                <option value="2">Femenino</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => entrevistadoActual.InterGender)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Ocupacion:</label>
                            <InputText class="form-control" @bind-Value="entrevistadoActual.InterOccupation" />
                            <ValidationMessage For="@(() => entrevistadoActual.InterOccupation)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nickname:</label>
                            <InputText class="form-control" @bind-Value="entrevistadoActual.InterNickname" />
                            <ValidationMessage For="@(() => entrevistadoActual.InterNickname)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">NSE:</label>
                            <InputText class="form-control" @bind-Value="entrevistadoActual.InterNSE" />
                            <ValidationMessage For="@(() => entrevistadoActual.InterNSE)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha Entrevista:</label>
                            <InputDate class="form-control" @bind-Value="entrevistadoActual.DateInter" />
                            <ValidationMessage For="@(() => entrevistadoActual.DateInter)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="bi bi-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string IdProyecto { get; set; }

    private List<Interviews> entrevistados = new();
    private CreateInterview entrevistadoActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private int UserRol = 5;
    private string username = "dusa-user";

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IInterviews repository { get; set; } = null!;
    [Inject] private IProjects repoproyect { get; set; } = null!;
    [Inject] private IEmployee repouser { get; set; } = null!;
    private Projects proyecto = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                username = authState.User.Identity.Name.Split(@"\")[1].Trim();
                Employee user = await repouser.GetByUsernameAsync(username);

                if (user != null)
                {
                    UserRol = user.EmployeeRol;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }

        try
        {
            proyecto = (Projects)await repoproyect.GetByIdAsync(int.Parse(IdProyecto));

            entrevistados = (List<Interviews>)await repository.GetByProjectIdAsync(int.Parse(IdProyecto));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void MostrarFormulario()
    {
        try
        {
            entrevistadoActual = new CreateInterview();
            entrevistadoActual.IdProject = int.Parse(IdProyecto);
            entrevistadoActual.InterGender = -1;
            entrevistadoActual.DateInter = DateTime.Now;
            mostrarFormulario = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void EditarEntidad(Interviews entrevistado)
    {
        try
        {
            entrevistadoActual = new CreateInterview
                {
                    IdProject = int.Parse(IdProyecto),
                    IdInter = entrevistado.IdInter,
                    InterName = entrevistado.InterName,
                    InterAge = entrevistado.InterAge,
                    InterGender = entrevistado.InterGender,
                    InterOccupation = entrevistado.InterOccupation,
                    InterNickname = entrevistado.InterNickname,
                    InterNSE = entrevistado.InterNSE,
                    DateInter = entrevistado.DateInter
                };
            mostrarFormulario = true;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarEntidad()
    {
        try
        {
            if (entrevistadoActual.IdInter == 0)
                await repository.CreateAsync(entrevistadoActual);
            else
                await repository.UpdateAsync(entrevistadoActual);

            entrevistados = (List<Interviews>)await repository.GetByProjectIdAsync(int.Parse(IdProyecto));
            mostrarFormulario = false;
            mensajeAlerta = "Entrevistado guardado exitosamente.";
            mostrarAlerta = true;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task EliminarEntidad(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
            if (confirmed)
            {
                await repository.DeleteAsync(id);
                entrevistados = (List<Interviews>)await repository.GetByProjectIdAsync(int.Parse(IdProyecto));
                mensajeAlerta = "Entrevistado eliminado exitosamente.";
                mostrarAlerta = true;
            }
        }
        catch (Exception ex)
        {
            mensajeAlerta = "No se puede eliminar el registros ya que existen relaciones con otras tablas que no han sido eliminadas.";
            mostrarAlerta = true;

            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private void Regresar()
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyectos");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void AgrgarHistorias(string id)
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyecstories/{id}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }
}