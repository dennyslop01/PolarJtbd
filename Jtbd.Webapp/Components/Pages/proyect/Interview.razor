@page "/proyect/interview"
@rendermode InteractiveServer
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Interview> Logger

<PageTitle>Entrevistados</PageTitle>
<div class="row align-content-center">
    <div class="col-lg-12">
        <h3 class="text-center mt-4">Gestión de Entrevistados</h3>
        <div class="d-flex justify-content-end mb-3">
            <button class="btn btn-primary" @onclick="MostrarFormulario">
                <i class="bi bi-plus"></i> Agregar Entrevistado
            </button>
        </div>

        @if (mostrarAlerta)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @mensajeAlerta
                <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
            </div>
        }


        @if (entrevistados is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!entrevistados.Any())
        {
            <div class="alert alert-info text-center">No hay entrevistados disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th>Edad</th>
                        <th>Sexo</th>
                        <th>Ocupacion</th>
                        <th>Nickname</th>
                        <th>NSE</th>
                        <th>Fecha Entrevista</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in entrevistados.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.IdInter</td>
                            <td>@p.InterName</td>
                            <td>@p.InterAge</td>
                            @switch (p.InterGender)
                            {
                                case 1:
                                    <td>Masculino</td>
                                    break;
                                case 2:
                                    <td>Femenino</td>
                                    break;
                            }
                            <td>@p.InterOccupation</td>
                            <td>@p.InterNickname</td>
                            <td>@p.InterNSE</td>
                            <td>@p.DateInter</td>
                            <td>
                                <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarEntidad(p)">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarEntidad(p.IdInter)">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(entrevistadoActual.IdInter == 0 ? "Agregar" : "Editar")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="entrevistadoActual" OnValidSubmit="GuardarEntidad">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="entrevistadoActual.InterName" />
                            <ValidationMessage For="@(() => entrevistadoActual.InterName)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Edad:</label>
                            <InputNumber class="form-control" @bind-Value="entrevistadoActual.InterAge" />
                            <ValidationMessage For="@(() => entrevistadoActual.InterAge)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Sexo:</label>
                            <InputSelect class="form-select" @bind-Value="entrevistadoActual.InterGender">
                                <option value="-1">-- Seleccione uno --</option>
                                <option value="1">Masculino</option>
                                <option value="2">Femenino</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => entrevistadoActual.InterGender)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Ocupacion:</label>
                            <InputText class="form-control" @bind-Value="entrevistadoActual.InterOccupation" />
                            <ValidationMessage For="@(() => entrevistadoActual.InterOccupation)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nickname:</label>
                            <InputText class="form-control" @bind-Value="entrevistadoActual.InterNickname" />
                            <ValidationMessage For="@(() => entrevistadoActual.InterNickname)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">NSE:</label>
                            <InputText class="form-control" @bind-Value="entrevistadoActual.InterNSE" />
                            <ValidationMessage For="@(() => entrevistadoActual.InterNSE)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha Entrevista:</label>
                            <InputDate class="form-control" @bind-Value="entrevistadoActual.DateInter" />
                            <ValidationMessage For="@(() => entrevistadoActual.DateInter)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="bi bi-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Interviews> entrevistados = new();
    private CreateInterview entrevistadoActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IInterviews repository { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            entrevistados = (List<Interviews>)await repository.GetAllAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void MostrarFormulario()
    {
        try
        {
            entrevistadoActual = new CreateInterview();
            entrevistadoActual.InterGender = -1;
            entrevistadoActual.DateInter = DateTime.Now;
            mostrarFormulario = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void EditarEntidad(Interviews entrevistado)
    {
        try
        {
            entrevistadoActual = new CreateInterview
                {
                    IdInter = entrevistado.IdInter,
                    InterName = entrevistado.InterName,
                    InterAge = entrevistado.InterAge,
                    InterGender = entrevistado.InterGender,
                    InterOccupation = entrevistado.InterOccupation,
                    InterNickname = entrevistado.InterNickname,
                    InterNSE = entrevistado.InterNSE,
                    DateInter = entrevistado.DateInter
                };
            mostrarFormulario = true;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarEntidad()
    {
        try
        {
            if (entrevistadoActual.IdInter == 0)
                await repository.CreateAsync(entrevistadoActual);
            else
                await repository.UpdateAsync(entrevistadoActual);

            entrevistados = (List<Interviews>)await repository.GetAllAsync();
            mostrarFormulario = false;
            mensajeAlerta = "Usuario guardado exitosamente.";
            mostrarAlerta = true;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task EliminarEntidad(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
            if (confirmed)
            {
                await repository.DeleteAsync(id);
                entrevistados = (List<Interviews>)await repository.GetAllAsync();
                mensajeAlerta = "Usuario eliminado exitosamente.";
                mostrarAlerta = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }
}