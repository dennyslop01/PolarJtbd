@page "/proyect/proyecpulls"


@rendermode InteractiveServer
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using Jtbd.Webapp.Service
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Proyecpulls> Logger
@inject AuthenticationStateProvider authenticationStateProvider

@* @inject SessionService sessionService *@

<PageTitle>Proyectos Pulls</PageTitle>
<div class="row align-content-center">
    <div class="col-lg-6">
        <h3 class="text-center mt-4">Gestión de proyectos Pulls</h3>
        <div class="d-flex justify-content-end mb-3">
            <button class="btn btn-primary" @onclick="MostrarFormulario">
                <i class="bi bi-plus-lg"></i> Agregar Pulls
            </button>
        </div>
        <EditForm Model="@Model">
            <div class="mb-3">
                <label class="form-label">Proyectos:</label>
                <InputSelect class="form-select" Value="Model.idProyecto" ValueChanged="@((int value) => OnProyectChanged(value))" ValueExpression="@(() => Model.idProyecto)">
                    <option value="-1">-- Seleccione uno --</option>
                    @foreach (var item in proyectos)
                    {
                        <option value="@item.IdProject">@item.ProjectName</option>
                    }
                </InputSelect>
            </div>
        </EditForm>

        @if (mostrarAlerta)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @mensajeAlerta
                <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
            </div>
        }


        @if (pulls is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!pulls.Any())
        {
            <div class="alert alert-info text-center">No hay pulls disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th>Estatus</th>
                        <th> </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in pulls.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.IdPull</td>
                            <td>@p.PullName</td>
                            <td>@p.PullDescription</td>
                            @switch (p.StatusPull)
                            {
                                case 0:
                                    <td>Inactivo</td>
                                    break;
                                case 1:
                                    <td>Activo</td>
                                    break;
                            }
                            <td>
                            @if (UserRol > 0 && UserRol < 3)
                            {
                                <button class="btn btn-success btn-sm me-2" @onclick="() => EditarEntidad(p)">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarEntidad(p.IdPull)">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(entidadActual.IdPull == 0 ? "Agregar" : "Editar")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@entidadActual" OnValidSubmit="GuardarEntidad">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="entidadActual.PullName" />
                            <ValidationMessage For="@(() => entidadActual.PullName)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripcion:</label>
                            <InputText class="form-control" @bind-Value="entidadActual.PullDescription" />
                            <ValidationMessage For="@(() => entidadActual.PullDescription)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Estatus:</label>
                            <InputSelect class="form-select" @bind-Value="entidadActual.StatusPull">
                                <option value="-1">-- Seleccione uno --</option>
                                <option value="1">Activo</option>
                                <option value="0">Inactivo</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => entidadActual.StatusPull)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="bi bi-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public class Proyecto
    {
        public int idProyecto { get; set; }
    }

    public Proyecto Model { get; set; } = new Proyecto();
    private List<Projects> proyectos = new();
    private List<PullGroups> pulls = new();
    private CreatePull entidadActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private int UserRol = 5;
    private string username = string.Empty;

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IPullGroups repository { get; set; } = null!;
    [Inject] private IProjects repoproyec { get; set; } = null!;
    [Inject] private IEmployee repouser { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                username = authState.User.Identity.Name.Split(@"\")[1].Trim();
                Employee user = await repouser.GetByUsernameAsync(username);

                if (user != null)
                {
                    UserRol = user.EmployeeRol;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }

        try
        {
            proyectos = (List<Projects>)await repoproyec.GetAllAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }
    }

    private void MostrarFormulario()
    {
        try
        {
            if (Model.idProyecto > 0)
            {
                entidadActual = new CreatePull();
                entidadActual.IdProject = Model.idProyecto;
                entidadActual.StatusPull = -1;
                entidadActual.CreatedDate = DateTime.Now;
                entidadActual.CreatedUser = username;
                entidadActual.UpdatedDate = DateTime.Now;
                entidadActual.UpdatedUser = username;

                mostrarFormulario = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void EditarEntidad(PullGroups entidad)
    {
        try
        {
            if (Model.idProyecto > 0)
            {
                entidadActual = new CreatePull
                    {
                        IdProject = entidad.Project.IdProject,
                        IdPull = entidad.IdPull,
                        PullName = entidad.PullName,
                        PullDescription = entidad.PullDescription,
                        CreatedDate = entidad.CreatedDate,
                        CreatedUser = entidad.CreatedUser,
                        UpdatedDate = DateTime.Now,
                        UpdatedUser = username,
                        StatusPull = entidad.StatusPull
                    };
                mostrarFormulario = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarEntidad()
    {
        try{
            if (entidadActual.IdPull == 0)
                await repository.CreateAsync( entidadActual);
            else
                await repository.UpdateAsync( entidadActual);


            pulls = (List<PullGroups>) await repository.GetAllAsync();

            mostrarFormulario = false;
            mensajeAlerta = "Pulls guardado exitosamente.";
            mostrarAlerta = true;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task EliminarEntidad(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
            if (confirmed)
            {

                await repository.DeleteAsync(id);
                pulls = (List<PullGroups>)await repository.GetAllAsync();

                mensajeAlerta = "Pulls eliminado exitosamente.";
                mostrarAlerta = true;
            }
        }catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private async Task OnProyectChanged(int value)
    {
        try
        {
            Model.idProyecto = value;
            pulls = (List<PullGroups>)await repository.GetByProjectIdAsync(value);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }
}