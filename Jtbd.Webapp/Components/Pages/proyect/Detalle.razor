@page "/proyect/detalle/{IdStorie}"
@rendermode InteractiveServer
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities

@inject IHttpContextAccessor HttpContextAccessor

@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Proyecstories> Logger


<PageTitle>Historia Detalle</PageTitle>

<div class="row align-content-center">
    <div class="col-lg-10">
    </div>
</div>

<div class="row align-content-center">
    <div class="col-lg-11">
        <button class="btn btn-link btn-sm me-2 align-content-end" title="Regresar" @onclick="Regresar2">
            @(entidadStorie.Project == null ? "-" : entidadStorie.Project.ProjectName)  <i class="bi bi-arrow-return-left"></i>
        </button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <button class="btn btn-link btn-sm me-2 align-content-end" title="Regresar" @onclick="Regresar3">
            @(entidadStorie.IdInter == null ? "-" : entidadStorie.IdInter.InterName)  <i class="bi bi-arrow-return-left"></i>
        </button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <button class="btn btn-link btn-sm me-2 align-content-end" title="Regresar" @onclick="Regresar">
            @(entidadStorie == null ? "-" : entidadStorie.TitleStorie)  <i class="bi bi-arrow-return-left"></i>
        </button>
        <br />

        <h3 class="text-center mt-4">Gestión de Historias Característica</h3>
        @* <table class="table table-striped table-hover">
            <thead class="table bg-opacity-25">
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
               <tr>
                    <td>@(entidadStorie.Project == null ? "-" : entidadStorie.Project.ProjectName) </td>
                    <td>@(entidadStorie.IdInter == null ? "-" : entidadStorie.IdInter.InterName) </td>
                    <td>@entidadStorie.TitleStorie</td>
                    <td>
                        <button class="btn btn-secondary btn-sm me-2 align-content-end" title="Regresar" @onclick="Regresar">
                            <i class="bi bi-arrow-return-left"></i>
                        </button>
                    </td>
                </tr>
            </tbody>
        </table> *@
    </div>
    <div class="col-lg-11">
        <table class="table table-striped table-hover">
            <thead class="table-secondary bg-opacity-25">
                <tr>
                    <th>Contexto</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@entidadStorie.ContextStorie</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="row align-content-center" style="font-size: 11px;">
    <div class="col-lg-5">
        <label><strong>Pushes</strong></label>
        <br />
        @if (pushstorie is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!pushstorie.Any())
        {
            <div class="alert alert-light text-center bg-opacity-25">No hay pushes disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th> </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in pushstorie.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.PushesGroups.IdPush</td>
                            <td>@p.PushesGroups.PushName</td>
                            <td>
                                @if (HttpContextAccessor.HttpContext.Session.GetInt32("UserRol") < 3)
                                {
                                    <button class="btn btn-success btn-sm me-2" title="Editar" @onclick="() => EditarPush(p.PushesGroups)">
                                        <i class="bi bi-pencil"></i> 
                                    </button>
                                    <button class="btn btn-danger btn-sm" title="Eliminar" @onclick="() => EliminarEntidad(1, p.PushesGroups.IdPush)" style="font-size: 11px;">
                                        <i class="bi bi-trash"></i> 
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <br />
        @if (HttpContextAccessor.HttpContext.Session.GetInt32("UserRol") < 3)
        {
            <button class="btn btn-primary btn-sm" title="Pushes" @onclick="MostrarPushes" style="font-size: 11px;">
                <i class="bi bi-plus-lg"></i> 
            </button>
        }
    </div>
    <div class="col-lg-5">
        <label><strong>Pulls</strong></label>
        <br />
        @if (pullstorie is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!pullstorie.Any())
        {
            <div class="alert alert-light text-center bg-opacity-25">No hay pulls disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th> </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in pullstorie.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.PullGroups.IdPull</td>
                            <td>@p.PullGroups.PullName</td>
                            <td>
                                @if (HttpContextAccessor.HttpContext.Session.GetInt32("UserRol") < 3)
                                {
                                    <button class="btn btn-success btn-sm me-2" title="Editar" @onclick="() => EditarPull(p.PullGroups)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-danger btn-sm" title="Eliminar" @onclick="() => EliminarEntidad(2, p.PullGroups.IdPull)" style="font-size: 11px;">
                                        <i class="bi bi-trash"></i> 
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <br />
        @if (HttpContextAccessor.HttpContext.Session.GetInt32("UserRol") < 3)
        {
            <button class="btn btn-primary btn-sm" title="Pulls" @onclick="MostrarPulls" style="font-size: 11px;">
                <i class="bi bi-plus-lg"></i> 
            </button>
        }
    </div>
</div>
<br />
<br />

<div class="row align-content-center" style="font-size: 11px;">
    <div class="col-lg-5">
        <label><strong>Hábitos</strong></label>
        <br />
        @if (habitstorie is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!habitstorie.Any())
        {
            <div class="alert alert-light text-center bg-opacity-25">No hay hábitos disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th> </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in habitstorie.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.Habits.IdHabit</td>
                            <td>@p.Habits.HabitName</td>
                            <td>
                                @if (HttpContextAccessor.HttpContext.Session.GetInt32("UserRol") < 3)
                                {
                                    <button class="btn btn-success btn-sm me-2" title="Editar" @onclick="() => EditarHabit(p.Habits)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-danger btn-sm" title="Eliminar" @onclick="() => EliminarEntidad(3, p.Habits.IdHabit)" style="font-size: 11px;">
                                        <i class="bi bi-trash"></i> 
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <br />
        @if (HttpContextAccessor.HttpContext.Session.GetInt32("UserRol") < 3)
        {
            <button class="btn btn-primary btn-sm" title="Hábitos" @onclick="MostrarHabits" style="font-size: 11px;">
                <i class="bi bi-plus-lg"></i> 
            </button>
        }
    </div>
    <div class="col-lg-5">
        <label><strong>Ansiedades</strong></label>
        <br />
        @if (anxiestorie is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!anxiestorie.Any())
        {
            <div class="alert alert-light text-center bg-opacity-25">No hay ansiedades disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th> </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in anxiestorie.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.Anxieties.IdAnxie</td>
                            <td>@p.Anxieties.AnxieName</td>
                            <td>
                                @if (HttpContextAccessor.HttpContext.Session.GetInt32("UserRol") < 3)
                                {
                                    <button class="btn btn-success btn-sm me-2" title="Editar" @onclick="() => EditarAnxie(p.Anxieties)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-danger btn-sm" title="Eliminar" @onclick="() => EliminarEntidad(4, p.Anxieties.IdAnxie)" style="font-size: 11px;">
                                        <i class="bi bi-trash"></i> 
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <br />
        @if (HttpContextAccessor.HttpContext.Session.GetInt32("UserRol") < 3)
        {
            <button class="btn btn-primary btn-sm" title="Ansiedades" @onclick="MostrarAnxies" style="font-size: 11px;">
                <i class="bi bi-plus-lg"></i> 
            </button>
        }
    </div>
</div>


@if (mostrarPush)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Agregar</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@pushActual" OnValidSubmit="GuardarPush">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Push:</label>
                            <InputText class="form-control" @bind-Value="pushActual.PushName" />
                            <ValidationMessage For="@(() => pushActual.PushName)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="bi bi-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarPull)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Agregar</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@pullActual" OnValidSubmit="GuardarPull">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Pull:</label>
                            <InputText class="form-control" @bind-Value="pullActual.PullName" />
                            <ValidationMessage For="@(() => pullActual.PullName)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="bi bi-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarHabit)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Agregar</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@habitActual" OnValidSubmit="GuardarHabit">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Hábito:</label>
                            <InputText class="form-control" @bind-Value="habitActual.HabitName" />
                            <ValidationMessage For="@(() => habitActual.HabitName)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="bi bi-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarAnxie)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Agregar</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@anxieActual" OnValidSubmit="GuardarAnxie">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Ansiedad:</label>
                            <InputText class="form-control" @bind-Value="anxieActual.AnxieName" />
                            <ValidationMessage For="@(() => anxieActual.AnxieName)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="bi bi-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="bi bi-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] 
    public string idStorie { get; set; }
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;

    private bool mostrarPush = false;
    private bool mostrarPull = false;
    private bool mostrarHabit = false;
    private bool mostrarAnxie = false;

    [Inject] private IStories repostorie { get; set; } = null!;
    [Inject] private IPushesGroups repopush { get; set; } = null!;
    [Inject] private IPullGroups repopull { get; set; } = null!;
    [Inject] private IHabits repohabi { get; set; } = null!;
    [Inject] private IAnxieties repoanxie { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    private Stories entidadStorie = new ();
    private string username = "Auxiliar";
    private int idProyec = 0;

    // private List<PushesGroups> pushes = new();
    // private List<PushesGroups> auxpushes = new();
    private List<StoriesPush> pushstorie = new();

    // private List<PullGroups> pulls = new();
    // private List<PullGroups> auxpulls = new();
    private List<StoriesPull> pullstorie = new();

    // private List<Habits> habits = new();
    // private List<Habits> auxhabits = new();
    private List<StoriesHabbit> habitstorie = new();

    // private List<Anxieties> anxies = new();
    // private List<Anxieties> auxanxies = new();
    private List<StoriesAnxiety> anxiestorie = new();

    private CreatePushes pushActual = new();
    private CreatePull pullActual = new();
    private CreateAnxietie anxieActual = new();
    private CreateHabits habitActual = new();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            entidadStorie = (Stories)await repostorie.GetByIdAsync(int.Parse(idStorie));
            if (entidadStorie.Project != null)
            {
                idProyec = entidadStorie.Project.IdProject;

                pushstorie = (List<StoriesPush>)await repostorie.GetPushesByStorieIdAsync(int.Parse(idStorie));
                // pushes = (List<PushesGroups>)await repopush.GetByProjectIdAsync(idProyec);
                // auxpushes = pushes;

                pullstorie = (List<StoriesPull>)await repostorie.GetPullsByStorieIdAsync(int.Parse(idStorie));
                // pulls = (List<PullGroups>)await repopull.GetByProjectIdAsync(idProyec);
                // auxpulls = pulls;

                habitstorie = (List<StoriesHabbit>)await repostorie.GetHabitsByStorieIdAsync(int.Parse(idStorie));
                // habits = (List<Habits>)await repohabi.GetByProjectIdAsync(idProyec);
                // auxhabits = habits;

                anxiestorie = (List<StoriesAnxiety>)await repostorie.GetAxieByStorieIdAsync(int.Parse(idStorie));
                // anxies = (List<Anxieties>)await repoanxie.GetByProjectIdAsync(idProyec);
                // auxanxies = anxies;
            }

        }
        catch (Exception ex)
        {
            //Logger.LogError(ex.Message);
            await this.JSRuntime.InvokeVoidAsync("console.log", ex.Message);
        }
    }

    private async Task MostrarPushes()
    {
        try
        {
            // if (pushstorie.Count() > 0)
            // {
            //     var excludedIDs = new HashSet<int>(pushstorie.Select(p => p.PushesGroups.IdPush));
            //     var auxiliar = pushes.Where(p => !excludedIDs.Contains(p.IdPush)).ToList();

            //     auxpushes = (List<PushesGroups>) auxiliar;
            // }

            pushActual = new CreatePushes();
            pushActual.IdPush = 0;
            pushActual.IdProject = entidadStorie.Project.IdProject;
            pushActual.CreatedDate = DateTime.Now;
            pushActual.CreatedUser = username;
            pushActual.UpdatedDate = DateTime.Now;
            pushActual.UpdatedUser = username;
            pushActual.StatusPush = 1;
            mostrarPush = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void EditarPush(PushesGroups entidad)
    {
        try
        {
            pushActual = new CreatePushes
                {
                    IdProject = entidadStorie.Project.IdProject,
                    IdPush = entidad.IdPush,
                    PushName = entidad.PushName,
                    CreatedDate = entidad.CreatedDate,
                    CreatedUser = entidad.CreatedUser,
                    UpdatedDate = DateTime.Now,
                    UpdatedUser = username,
                    StatusPush = entidad.StatusPush
                };
            mostrarPush = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task MostrarPulls()
    {
        try
        {
            // if (pullstorie.Count() > 0)
            // {
            //     var excludedIDs = new HashSet<int>(pullstorie.Select(p => p.PullGroups.IdPull));
            //     var auxiliar = pulls.Where(p => !excludedIDs.Contains(p.IdPull)).ToList();

            //     auxpulls = (List<PullGroups>)auxiliar;
            // }

            pullActual = new CreatePull();
            pullActual.IdPull = 0;
            pullActual.IdProject = entidadStorie.Project.IdProject;
            pullActual.CreatedDate = DateTime.Now;
            pullActual.CreatedUser = username;
            pullActual.UpdatedDate = DateTime.Now;
            pullActual.UpdatedUser = username;
            pullActual.StatusPull = 1;
            mostrarPull = true;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void EditarPull(PullGroups entidad)
    {
        try
        {
            pullActual = new CreatePull
            {
                IdProject = entidadStorie.Project.IdProject,
                IdPull = entidad.IdPull,
                PullName = entidad.PullName,
                CreatedDate = entidad.CreatedDate,
                CreatedUser = entidad.CreatedUser,
                UpdatedDate = DateTime.Now,
                UpdatedUser = username,
                StatusPull = entidad.StatusPull
            };
            mostrarPull = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task MostrarHabits()
    {
        try
        {
            // if (habitstorie.Count() > 0)
            // {
            //     var excludedIDs = new HashSet<int>(habitstorie.Select(p => p.Habits.IdHabit));
            //     var auxiliar = habits.Where(p => !excludedIDs.Contains(p.IdHabit)).ToList();

            //     auxhabits = (List<Habits>)auxiliar;
            // }

            habitActual = new CreateHabits();
            habitActual.IdHabit = 0;
            habitActual.IdProject = entidadStorie.Project.IdProject;
            habitActual.CreatedDate = DateTime.Now;
            habitActual.CreatedUser = username;
            habitActual.UpdatedDate = DateTime.Now;
            habitActual.UpdatedUser = username;
            habitActual.StatusHabit = 1;
            mostrarHabit = true;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void EditarHabit(Habits entidad)
    {
        try
        {
            habitActual = new CreateHabits
            {
                IdProject = entidadStorie.Project.IdProject,
                IdHabit = entidad.IdHabit,
                HabitName = entidad.HabitName,
                CreatedDate = entidad.CreatedDate,
                CreatedUser = entidad.CreatedUser,
                UpdatedDate = DateTime.Now,
                UpdatedUser = username,
                StatusHabit = entidad.StatusHabit
            };
            mostrarHabit = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task MostrarAnxies()
    {
        try
        {
            // if (anxiestorie.Count() > 0)
            // {
            //     var excludedIDs = new HashSet<int>(anxiestorie.Select(p => p.Anxieties.IdAnxie));
            //     var auxiliar = anxies.Where(p => !excludedIDs.Contains(p.IdAnxie)).ToList();

            //     auxanxies = (List<Anxieties>)auxiliar;
            // }

            anxieActual = new CreateAnxietie();
            anxieActual.IdAnxie = 0;
            anxieActual.IdProject = entidadStorie.Project.IdProject;
            anxieActual.CreatedDate = DateTime.Now;
            anxieActual.CreatedUser = username;
            anxieActual.UpdatedDate = DateTime.Now;
            anxieActual.UpdatedUser = username;
            anxieActual.StatusAnxie = 1;
            mostrarAnxie = true;
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void EditarAnxie(Anxieties entidad)
    {
        try
        {
            anxieActual = new CreateAnxietie
            {
                IdProject = entidadStorie.Project.IdProject,
                IdAnxie = entidad.IdAnxie,
                AnxieName = entidad.AnxieName,
                CreatedDate = entidad.CreatedDate,
                CreatedUser = entidad.CreatedUser,
                UpdatedDate = DateTime.Now,
                UpdatedUser = username,
                StatusAnxie = entidad.StatusAnxie
            };
            mostrarAnxie = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarPush()
    {
        try
        {
            if (pushActual.IdPush == 0)
            {
                PushesGroups auxenti = await repopush.CreateAsync(pushActual);
                CreateStoriesPush auxnuevo = new CreateStoriesPush()
                    {
                        IdPush = auxenti.IdPush,
                        IdStories = int.Parse(idStorie)
                    };
                await repostorie.CreateStoriePushAsync(auxnuevo);
            }
            else
                await repopush.UpdateAsync(pushActual);

            pushstorie = (List<StoriesPush>)await repostorie.GetPushesByStorieIdAsync(int.Parse(idStorie));

            mostrarPush = false;
            mensajeAlerta = "Push guardado exitosamente.";
            mostrarAlerta = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarPull()
    {
        try
        {
            if (pullActual.IdPull == 0)
            {
                PullGroups auxenti = await repopull.CreateAsync(pullActual);
                CreateStoriesPull auxnuevo = new CreateStoriesPull()
                    {
                        IdPull = auxenti.IdPull,
                        IdStories = int.Parse(idStorie)
                    };
                await repostorie.CreateStoriePullAsync(auxnuevo);
            }
            else
                await repopull.UpdateAsync(pullActual);

            pullstorie = (List<StoriesPull>)await repostorie.GetPullsByStorieIdAsync(int.Parse(idStorie));

            mostrarPull = false;
            mensajeAlerta = "Pull guardado exitosamente.";
            mostrarAlerta = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarHabit()
    {
        try
        {
            if (habitActual.IdHabit == 0)
            {
                Habits auxenti = await repohabi.CreateAsync(habitActual);
                CreateStoriesHabbit auxnuevo = new CreateStoriesHabbit()
                    {
                        IdHabit = auxenti.IdHabit,
                        IdStories = int.Parse(idStorie)
                    };
                await repostorie.CreateStorieHabitAsync(auxnuevo);
            }
            else
                await repohabi.UpdateAsync(habitActual);

            habitstorie = (List<StoriesHabbit>)await repostorie.GetHabitsByStorieIdAsync(int.Parse(idStorie));

            mostrarHabit = false;
            mensajeAlerta = "Hábito guardado exitosamente.";
            mostrarAlerta = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarAnxie()
    {
        try
        {
            if (anxieActual.IdAnxie == 0)
            {
                Anxieties auxenti = await repoanxie.CreateAsync(anxieActual);
                CreateStoriesAnxiety auxnuevo = new CreateStoriesAnxiety()
                    {
                        IdAnxie = auxenti.IdAnxie,
                        IdStories = int.Parse(idStorie)
                    };
                await repostorie.CreateStorieAnxieAsync(auxnuevo);
            }
            else
                await repoanxie.UpdateAsync(anxieActual);

            anxiestorie = (List<StoriesAnxiety>)await repostorie.GetAxieByStorieIdAsync(int.Parse(idStorie));

            mostrarAnxie = false;
            mensajeAlerta = "Ansiedad guardado exitosamente.";
            mostrarAlerta = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }


    private async Task EliminarEntidad(int opcion, int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
            if (confirmed)
            {
                await repostorie.DeleteStorieEntityAsync(opcion, int.Parse(idStorie), id);

                mensajeAlerta = "Item eliminado exitosamente.";

                switch(opcion)
                {
                    case 1:
                        await repopush.DeleteAsync(id);
                        pushstorie = (List<StoriesPush>)await repostorie.GetPushesByStorieIdAsync(int.Parse(idStorie));
                        break;
                    case 2:
                        await repopull.DeleteAsync(id);
                        pullstorie = (List<StoriesPull>)await repostorie.GetPullsByStorieIdAsync(int.Parse(idStorie));
                        break;
                    case 3:
                        await repohabi.DeleteAsync(id);
                        habitstorie = (List<StoriesHabbit>)await repostorie.GetHabitsByStorieIdAsync(int.Parse(idStorie));
                        break;
                    case 4:
                        await repoanxie.DeleteAsync(id);
                        anxiestorie = (List<StoriesAnxiety>)await repostorie.GetAxieByStorieIdAsync(int.Parse(idStorie));
                        break;
                }
                mostrarAlerta = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarPush = false;
        mostrarPull = false;
        mostrarHabit = false;
        mostrarAnxie = false;
    }

    private void Regresar()
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyecstories/{entidadStorie.IdInter.IdInter}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Regresar2()
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyectos");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Regresar3()
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/interview/{entidadStorie.Project.IdProject}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }
}