@page "/proyect/detalle/{IdStorie}"
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Proyecstories> Logger
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Historia Detalle</PageTitle>

<div class="row align-content-center">
    <div class="col-lg-10">
        <h3 class="text-center mt-4">Gestión de Historias Característica</h3>
    </div>
</div>

<div class="row align-content-center">
    <div class="col-lg-6">
        <table class="table table-striped table-hover">
            <thead class="table-secondary bg-opacity-25">
                <tr>
                    <th>Proyecto</th>
                    <th>#</th>
                    <th>Titulo</th>
                </tr>
            </thead>
            <tbody>
               <tr>
                    <td>@(entidadStorie.Project == null? "-": entidadStorie.Project.ProjectName) </td>
                    <td>@entidadStorie.IdStorie</td>
                    <td>@entidadStorie.TitleStorie</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="col-lg-10">
        <table class="table table-striped table-hover">
            <thead class="table-secondary bg-opacity-25">
                <tr>
                    <th>Contexto</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@entidadStorie.ContextStorie</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="row align-content-center" style="font-size: 11px;">
    <div class="col-lg-4">
        <label><strong>Pushes</strong></label>
        <br />
        @if (pushstorie is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!pushstorie.Any())
        {
            <div class="alert alert-info text-center">No hay pushes disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in pushstorie.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.PushesGroups.IdPush</td>
                            <td>@p.PushesGroups.PushName</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarEntidad(1, p.PushesGroups.IdPush)" style="font-size: 11px;">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <br />
        <button class="btn btn-primary btn-sm" @onclick="MostrarPushes" style="font-size: 11px;">
           <i class="bi bi-plus"></i> Pushes
        </button>
    </div>
    <div class="col-lg-4">
        <label><strong>Pulls</strong></label>
        <br />
        @if (pullstorie is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!pullstorie.Any())
        {
            <div class="alert alert-info text-center">No hay pushes disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in pullstorie.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.PullGroups.IdPull</td>
                            <td>@p.PullGroups.PullName</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarEntidad(2, p.PullGroups.IdPull)" style="font-size: 11px;">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <br />
        <button class="btn btn-primary btn-sm" @onclick="MostrarPulls" style="font-size: 11px;">
           <i class="bi bi-plus"></i> Pulls
        </button>
    </div>
</div>
<br />
<br />

<div class="row align-content-center" style="font-size: 11px;">
    <div class="col-lg-4">
        <label><strong>Hábitos</strong></label>
        <br />
        @if (habitstorie is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!habitstorie.Any())
        {
            <div class="alert alert-info text-center">No hay pushes disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in habitstorie.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.Habits.IdHabit</td>
                            <td>@p.Habits.HabitName</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarEntidad(3, p.Habits.IdHabit)" style="font-size: 11px;">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <br />
        <button class="btn btn-primary btn-sm" @onclick="MostrarAnxies" style="font-size: 11px;">
            <i class="bi bi-plus"></i> Hábitos
        </button>
    </div>
    <div class="col-lg-4">
        <label><strong>Ansiedades</strong></label>
        <br />
        @if (anxiestorie is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!anxiestorie.Any())
        {
            <div class="alert alert-info text-center">No hay pushes disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in anxiestorie.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.Anxieties.IdAnxie</td>
                            <td>@p.Anxieties.AnxieName</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarEntidad(4, p.Anxieties.IdAnxie)" style="font-size: 11px;">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <br />
        <button class="btn btn-primary btn-sm" @onclick="MostrarHabits" style="font-size: 11px;">
            <i class="bi bi-plus"></i> Ansiedades
        </button>
    </div>
</div>

@code {
    [Parameter] 
    public string idStorie { get; set; }
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;

    [Inject] private IStories repostorie { get; set; } = null!;
    [Inject] private IPushesGroups repopush { get; set; } = null!;
    [Inject] private IPullGroups repopull { get; set; } = null!;
    [Inject] private IHabits repohabi { get; set; } = null!;
    [Inject] private IAnxieties repoanxie { get; set; } = null!;

    private Stories entidadStorie = new ();
    private string username = "Auxiliar";
    private int idProyec = 0;

    private List<PushesGroups> pushes = new();
    private List<PushesGroups> auxpushes = new();
    private List<StoriesPush> pushstorie = new();

    private List<PullGroups> pulls = new();
    private List<PullGroups> auxpulls = new();
    private List<StoriesPull> pullstorie = new();

    private List<Habits> habits = new();
    private List<Habits> auxhabits = new();
    private List<StoriesHabbit> habitstorie = new();

    private List<Anxieties> anxies = new();
    private List<Anxieties> auxanxies = new();
    private List<StoriesAnxiety> anxiestorie = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
                username = authState.User.Identity.Name.Split(@"\")[1].Trim();
        }
        catch (Exception ex)
        {
            //Logger.LogError(ex.Message);
            await this.JSRuntime.InvokeVoidAsync("console.log", ex.Message);
        }

        try
        {
            entidadStorie = (Stories)await repostorie.GetByIdAsync(int.Parse(idStorie));
            if (entidadStorie.Project != null)
            {
                idProyec = entidadStorie.Project.IdProject;

                pushstorie = (List<StoriesPush>)await repostorie.GetPushesByStorieIdAsync(int.Parse(idStorie));
                pushes = (List<PushesGroups>)await repopush.GetByProjectIdAsync(idProyec);
                auxpushes = pushes;
                
                pullstorie = (List<StoriesPull>)await repostorie.GetPullsByStorieIdAsync(int.Parse(idStorie));
                pulls = (List<PullGroups>)await repopull.GetByProjectIdAsync(idProyec);
                auxpulls = pulls;
                
                habitstorie = (List<StoriesHabbit>)await repostorie.GetHabitsByStorieIdAsync(int.Parse(idStorie));
                habits = (List<Habits>)await repohabi.GetByProjectIdAsync(idProyec);
                auxhabits = habits;
                
                anxiestorie = (List<StoriesAnxiety>)await repostorie.GetAxieByStorieIdAsync(int.Parse(idStorie));
                anxies = (List<Anxieties>)await repoanxie.GetByProjectIdAsync(idProyec);
                auxanxies = anxies;
            }

        }
        catch (Exception ex)
        {
            //Logger.LogError(ex.Message);
            await this.JSRuntime.InvokeVoidAsync("console.log", ex.Message);
        }
    }

    private void MostrarPushes()
    {
        try
        {

        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void MostrarPulls()
    {
        try
        {
            
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void MostrarHabits()
    {
        try
        {
            
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void MostrarAnxies()
    {
        try
        {
            
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task EliminarEntidad(int opcion, int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
            if (confirmed)
            {
                
                mensajeAlerta = "Item eliminado exitosamente.";
                mostrarAlerta = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }
}