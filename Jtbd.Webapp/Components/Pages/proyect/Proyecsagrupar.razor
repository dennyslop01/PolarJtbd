@page "/proyect/proyecsagrupar/{IdProyecto}"

@rendermode InteractiveServer
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using Jtbd.Webapp.Data
@using Jtbd.Webapp.Service
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration
@inject ILogger<Interview> Logger
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Agrupar Historias</PageTitle>
<div class="row align-content-center">
    <div class="col-lg-12">
        <div class="col-lg-11">
            <div class="d-flex justify-content-start mb-3">
                <button class="btn btn-link btn-sm me-2 align-content-end" title="Regresar" @onclick="Regresar">
                    @(proyecto == null ? "-" : proyecto.ProjectName)  <i class="bi bi-arrow-return-left"></i>
                </button>
            </div>
            <h3 class="text-start mt-4">Agrupar Historias</h3>

            @if (mostrarAlerta)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @mensajeAlerta
                    <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
                </div>
            }
        </div>
    </div>
</div>

<div class="row align-content-center">
    <div class="col-lg-4">
        <div class="list-container" ondragover="event.preventDefault();" @ondrop="HandleDropList1">
            <h5>Historias - Pushes</h5>
            @foreach (var item in List1)
            {
                <div class="draggable-item" draggable="true"
                        @ondragstart="() => HandleDragStart(item, null)"
                        @ondragend="HandleDragEnd">
                    @item.Name
                </div>
            }
        </div>
    </div>
    <div class="col-lg-8">
        <div class="row">
            @foreach (var group in grupospush)
            {
                <div class="col-lg-4">
                    <div id="@group.IdGroup+@group.GroupName" class="list-container" ondragover="event.preventDefault();" @ondrop="() => HandleDropList2(group.IdGroup, new DragEventArgs())">
                        <div>
                            @group.GroupName&nbsp;&nbsp;&nbsp;
                            @if (group.GroupName != "Leftovers")
                            {
                                @if (UserRol > 0 && UserRol < 3)
                                {
                                    <button class="btn btn-success btn-sm me-2" title="Editar" @onclick="() => EditarEntidad(group)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <br />
                                }
                            }
                        </div>
                        @foreach (var item in List2)
                        {
                            if (group.IdGroup == item.IdGroup)
                            {
                                <div class="draggable-item" draggable="true"
                                        @ondragstart="() => HandleDragStart(item, group.IdGroup)"
                                        @ondragend="HandleDragEnd">
                                    @item.Name
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        </div>                
    </div>
</div>
<br />
<br />
<div class="row align-content-center">
    <div class="col-lg-4">
        <div class="list-container" ondragover="event.preventDefault();" @ondrop="HandleDropList3">
            <h5>Historias - Pulls</h5>
            @foreach (var item in List3)
            {
                <div class="draggable-item" draggable="true"
                     @ondragstart="() => HandleDragStart2(item, null)"
                     @ondragend="HandleDragEnd2">
                    @item.Name
                </div>
            }
        </div>
    </div>
    <div class="col-lg-8">
        <div class="row">
            @foreach (var group in grupospull)
            {
                <div class="col-lg-4">
                    <div id="@group.IdGroup+@group.GroupName" class="list-container" ondragover="event.preventDefault();" @ondrop="() => HandleDropList4(group.IdGroup, new DragEventArgs())">
                        <div>
                            @group.GroupName&nbsp;&nbsp;&nbsp;
                            @if (group.GroupName != "Leftovers")
                            {
                                @if (UserRol > 0 && UserRol < 3)
                                {
                                    <button class="btn btn-success btn-sm me-2" title="Editar" @onclick="() => EditarEntidad(group)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <br />
                                }
                            }
                        </div>
                        @foreach (var item in List4)
                        {
                            if (group.IdGroup == item.IdGroup)
                            {
                                <div class="draggable-item" draggable="true"
                                     @ondragstart="() => HandleDragStart2(item, group.IdGroup)"
                                     @ondragend="HandleDragEnd2">
                                    @item.Name
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        </div>
        
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="row align-content-center">
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(entidadActual.IdGroup == 0 ? "Agregar" : "Editar")</h5>
                        <button type="button" class="btn-close" @onclick="Cancelar"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="entidadActual" OnValidSubmit="GuardarEntidad">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label class="form-label">Nombre:</label>
                                <InputText class="form-control" @bind-Value="entidadActual.GroupName" />
                                <ValidationMessage For="@(() => entidadActual.GroupName)" />
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-success me-2">
                                    <i class="bi bi-save"></i> Guardar
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                    <i class="bi bi-times"></i> Cancelar
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
            </div>
    </div>
}

@code {
    [Parameter]
    public string IdProyecto { get; set; }

    private List<Groups> grupospush = new();
    private List<Groups> grupospull = new();
    private List<StoriesPush> storiespush = new();
    private List<StoriesPull> storiespull = new();
    private CreateGroup entidadActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private int UserRol = 5;
    private string username = string.Empty;

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IGroups repository { get; set; } = null!;
    [Inject] private IProjects repoproyect { get; set; } = null!;
    [Inject] private IStories repostorie { get; set; } = null!;
    [Inject] private IEmployee repouser { get; set; } = null!;
    private Projects proyecto = new();

    private List<Item> List1 = new();
    private List<Item> List2 = new();
    private List<Item> List3 = new();
    private List<Item> List4 = new();

    private Item _draggedItem;
    private List<Item> _sourceList;
    private Item _draggedItem1;
    private List<Item> _sourceList1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                username = authState.User.Identity.Name.Split(@"\")[1].Trim();
                Employee user = await repouser.GetByUsernameAsync(username);

                if (user != null)
                {
                    UserRol = user.EmployeeRol;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
            mensajeAlerta = ex.Message;
            mostrarAlerta = true;
        }

        await CargarEntidades();
    }

    private async Task CargarEntidades()
    {
        try
        {
            proyecto = (Projects)await repoproyect.GetByIdAsync(int.Parse(IdProyecto));

            grupospush = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 0);
            grupospull = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 1);

            if (grupospush.Count() == 0)
            {
                for (int i = 1; i < 12; i++)
                {
                    string name = $"Grupo {i.ToString()}";
                    if (i == 11)
                        name = "Leftovers";

                    CreateGroup entidadActual = new CreateGroup()
                    {
                        IdGroup = 0,
                        IdTipo = 0,
                        IdProject = int.Parse(IdProyecto),
                        GroupName = name
                    };

                    await repository.CreateAsync(entidadActual);
                }
                grupospush = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 0);
            }

            if (grupospull.Count == 0)
            {
                for (int i = 1; i < 12; i++)
                {
                    string name = $"Grupo {i.ToString()}";
                    if (i == 11)
                        name = "Leftovers";

                    CreateGroup entidadActual = new CreateGroup()
                    {
                        IdGroup = 0,
                        IdTipo = 1,
                        IdProject = int.Parse(IdProyecto),
                        GroupName = name
                    };

                    await repository.CreateAsync(entidadActual);
                }
                grupospull = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 1);
            }

            storiespush = (List<StoriesPush>)await repostorie.GetPushesByProjectIdAsync(int.Parse(IdProyecto));
            foreach(var push in storiespush)
            {
                if (push.Groups == null)
                {
                    List1.Add(new Item
                        {
                            Id = push.PushesGroups.IdPush,
                            Name = push.Stories.TitleStorie + "-" + push.PushesGroups.PushName
                        });
                }
                else
                {
                    List2.Add(new Item
                    {
                        Id = push.PushesGroups.IdPush,
                        IdGroup = push.Groups.IdGroup,
                        Name = push.Stories.TitleStorie + "-" + push.PushesGroups.PushName
                    });
                }
            }

            storiespull = (List<StoriesPull>)await repostorie.GetPullsByProjectIdAsync(int.Parse(IdProyecto));
            foreach (var pull in storiespull)
            {
                if (pull.Groups == null)
                {
                    List3.Add(new Item
                    {
                        Id = pull.PullGroups.IdPull,
                        Name = pull.Stories.TitleStorie + "-" + pull.PullGroups.PullName
                    });
                }
                else
                {
                    List4.Add(new Item
                    {
                        Id = pull.PullGroups.IdPull,
                        IdGroup = pull.Groups.IdGroup,
                        Name = pull.Stories.TitleStorie + "-" + pull.PullGroups.PullName
                    });
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }


    private void EditarEntidad(Groups grupo)
    {
        try
        {
            entidadActual = new CreateGroup
            {
                IdProject = int.Parse(IdProyecto),
                IdGroup = grupo.IdGroup,
                IdTipo = grupo.IdTipo,
                GroupName = grupo.GroupName
            };
            mostrarFormulario = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task GuardarEntidad()
    {
        try
        {
            if (entidadActual.IdGroup == 0)
                await repository.CreateAsync(entidadActual);
            else
                await repository.UpdateAsync(entidadActual);

            grupospush = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 0);
            grupospull = (List<Groups>)await repository.GetByProjectIdIndicadorAsync(int.Parse(IdProyecto), 1); 

            mostrarFormulario = false;
            mensajeAlerta = "Grupo guardado exitosamente.";
            mostrarAlerta = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private void Regresar()
    {
        try
        {
            NavigationManager.NavigateTo($"proyect/proyectos");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private void HandleDragStart(Item item, int? idGroup)
    {
        @if (UserRol > 0 && UserRol < 3)
        {
            if (idGroup != null)
                item.IdGroup = idGroup;

            _draggedItem = item;
            _sourceList = List1.Contains(item) ? List1 : List2;
        }
    }

    private void HandleDragEnd()
    {
        _draggedItem = null;
        _sourceList = null;
    }

    private void HandleDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "move";
    }

    private async Task HandleDropList1(DragEventArgs e)
    {
        @if (UserRol > 0 && UserRol < 3)
        {
            if (_draggedItem != null && _sourceList != List1)
            {
                _draggedItem.IdGroup = null;
                _sourceList.Remove(_draggedItem);
                List1.Add(_draggedItem);
                await repostorie.UpdatePushesGroupEntityAsync(_draggedItem.Id, null);
                StateHasChanged();
            }
        }
    }

    private async Task HandleDropList2(int? idGroup, DragEventArgs e)
    {
        @if (UserRol > 0 && UserRol < 3)
        {
            {
                if (idGroup != null)
                    _draggedItem.IdGroup = idGroup;

                _sourceList.Remove(_draggedItem);
                List2.Add(_draggedItem);
                await repostorie.UpdatePushesGroupEntityAsync(_draggedItem.Id, _draggedItem.IdGroup);
                StateHasChanged();
            }
        }
    }

    private void HandleDragStart2(Item item, int? idGroup)
    {
        @if (UserRol > 0 && UserRol < 3)
        {
            if (idGroup != null)
                item.IdGroup = idGroup;

            _draggedItem1 = item;
            _sourceList1 = List3.Contains(item) ? List3 : List4;
        }
    }

    private void HandleDragEnd2()
    {
        _draggedItem1 = null;
        _sourceList1 = null;
    }

    private void HandleDragOver2(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "move";
    }

    private async Task HandleDropList3(DragEventArgs e)
    {
        @if (UserRol > 0 && UserRol < 3)
        {
            if (_draggedItem1 != null && _sourceList1 != List3)
            {
                _draggedItem1.IdGroup = null;
                _sourceList1.Remove(_draggedItem1);
                List3.Add(_draggedItem1);
                await repostorie.UpdatePullsGroupEntityAsync(_draggedItem1.Id, null);
                StateHasChanged();
            }
        }
    }

    private async Task HandleDropList4(int? idGroup, DragEventArgs e)
    {
        @if (UserRol > 0 && UserRol < 3)
        {
            if (_draggedItem1 != null && _sourceList1 != List4)
            {
                if (idGroup != null)
                    _draggedItem1.IdGroup = idGroup;

                _sourceList1.Remove(_draggedItem1);
                List4.Add(_draggedItem1);
                await repostorie.UpdatePullsGroupEntityAsync(_draggedItem1.Id, _draggedItem1.IdGroup);
                StateHasChanged();
            }
        }
    }
}
<style>
    .list-container {
        border: 2px dashed #ccc;
        padding: 10px;
        margin: 10px;
        min-height: 150px;
        flex: 1;
    }

    .draggable-item {
        background-color: lightblue;
        border: 1px solid blue;
        padding: 5px;
        margin-bottom: 5px;
        cursor: grab;
    }
</style>
