@page "/proyect/proyecpushes"
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServer
@using Jtbd.Domain.Entities
@using Jtbd.Webapp.Services
@inject IJSRuntime JSRuntime
@inject IConfiguration configuration

<PageTitle>Proyectos Pushes</PageTitle>
<div class="row align-content-center">
    <div class="col-lg-6">
        <h3 class="text-center mt-4">Gestión de proyectos pushes</h3>
        <div class="d-flex justify-content-end mb-3">
            <button class="btn btn-primary" @onclick="MostrarFormulario">
                <i class="fas fa-plus"></i> Agregar Pushes
            </button>
        </div>
        <EditForm Model="@Model">
            <div class="mb-3">
                <label class="form-label">Proyectos:</label>
                <InputSelect class="form-select" Value="Model.idProyecto" ValueChanged="@((int value) => OnProyectChanged(value))" ValueExpression="@(() => Model.idProyecto)">
                    <option value="-1">-- Seleccione uno --</option>
                    @foreach (var item in proyectos)
                    {
                        <option value="@item.IdProject">@item.ProjectName</option>
                    }
                </InputSelect>
            </div>
        </EditForm>
        
        @if (mostrarAlerta)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @mensajeAlerta
                <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
            </div>
        }


        @if (pushes is null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
                <p>Cargando datos...</p>
            </div>
        }
        else if (!pushes.Any())
        {
            <div class="alert alert-info text-center">No hay pushes disponibles.</div>
        }
        else
        {
            <table class="table table-striped table-hover">
                <thead class="table-secondary bg-opacity-25">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th>Estatus</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (p, index) in pushes.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@p.IdPush</td>
                            <td>@p.PushName</td>
                            <td>@p.PushDescription</td>
                            @switch (p.StatusPush)
                            {
                                case 0:
                                    <td>Inactivo</td>
                                    break;
                                case 1:
                                    <td>Activo</td>
                                    break;
                            }
                            <td>
                                <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarEntidad(p)">
                                    <i class="fas fa-edit"></i> Editar
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarEntidad(p.IdPush)">
                                    <i class="fas fa-trash"></i> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(entidadActual.IdPush == 0 ? "Agregar" : "Editar")</h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@entidadActual" OnValidSubmit="GuardarEntidad">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="entidadActual.PushName" />
                            <ValidationMessage For="@(() => entidadActual.PushName)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripcion:</label>
                            <InputText class="form-control" @bind-Value="entidadActual.PushDescription" />
                            <ValidationMessage For="@(() => entidadActual.PushDescription)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Estatus:</label>
                            <InputSelect class="form-select" @bind-Value="entidadActual.StatusPush">
                                <option value="-1">-- Seleccione uno --</option>
                                <option value="1">Activo</option>
                                <option value="0">Inactivo</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => entidadActual.StatusPush)" />
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success me-2">
                                <i class="fas fa-save"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                                <i class="fas fa-times"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public class Proyecto
    {
        public int idProyecto { get; set; }
    }

    public Proyecto Model { get; set; } = new Proyecto();
    private List<Projects> proyectos = new();
    private List<PushesGroups> pushes = new();
    private CreatePushes entidadActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;
    private string username = string.Empty;
    private string urlbase = string.Empty;

    [Inject] private IRepositoryGeneric repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var session = HttpContextAccessor.HttpContext.Session;
        username = session.GetString("WindowsUser");

        urlbase = configuration.GetSection("ApiBack").Value.ToString();
        //var url1 = "/api/pushesgroups";

        //pushes = await repository.GetAsync<List<PushesGroups>>(string.Concat(urlbase, url1));

        var url2 = "/api/projects";
        proyectos = await repository.GetAsync<List<Projects>>(string.Concat(urlbase, url2));
    }

    private void MostrarFormulario()
    {
        if (Model.idProyecto > 0)
        {
            entidadActual = new CreatePushes();
            entidadActual.IdProject = Model.idProyecto;
            entidadActual.StatusPush = -1;
            entidadActual.CreatedDate = DateTime.Now;
            entidadActual.CreatedUser = username;
            entidadActual.UpdatedDate = DateTime.Now;
            entidadActual.UpdatedUser = username;

            mostrarFormulario = true;
        }
    }

    private void EditarEntidad(PushesGroups entidad)
    {
        if (Model.idProyecto > 0)
        {
            entidadActual = new CreatePushes
                {
                    IdProject = entidad.Project.IdProject,
                    IdPush = entidad.IdPush,
                    PushName = entidad.PushName,
                    PushDescription = entidad.PushDescription,
                    CreatedDate = entidad.CreatedDate,
                    CreatedUser = entidad.CreatedUser,
                    UpdatedDate = DateTime.Now,
                    UpdatedUser = username,
                    StatusPush = entidad.StatusPush
                };
            mostrarFormulario = true;
        }
    }

    private async Task GuardarEntidad()
    {
        var url1 = "/api/pushesgroups/";
        var url2 = $"/api/pushesgroups/{entidadActual.IdProject}";

        if (entidadActual.IdPush == 0)
            await repository.PostAsync(string.Concat(urlbase, url1), entidadActual);
        else
            await repository.PutAsync(string.Concat(urlbase, url2), entidadActual);

        
        //pushes = await repository.GetAsync<List<PushesGroups>>(string.Concat(urlbase, url1));
        url1 = $"/api/pushesgroups/pushesgroupsproject/{Model.idProyecto}";
        pushes = await repository.GetAsync<List<PushesGroups>>(string.Concat(urlbase, url1)); 
        
        mostrarFormulario = false;
        mensajeAlerta = "Pushes guardado exitosamente.";
        mostrarAlerta = true;
    }

    private async Task EliminarEntidad(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Esta seguro que desea eliminar este registro?");
        if (confirmed)
        {
            var url1 = "/api/pushesgroups/";
            var url2 = $"/api/pushesgroups/{id}";

            await repository.DeleteAsync(string.Concat(urlbase, url2));
            //pushes = await repository.GetAsync<List<PushesGroups>>(string.Concat(urlbase, url1));
            url1 = $"/api/pushesgroups/pushesgroupsproject/{Model.idProyecto}";
            pushes = await repository.GetAsync<List<PushesGroups>>(string.Concat(urlbase, url1));

            mensajeAlerta = "Pushes eliminado exitosamente.";
            mostrarAlerta = true;
        }
    }

    private void Cancelar()
    {
        mostrarFormulario = false;
    }

    private async Task OnProyectChanged(int value)
    {
        Model.idProyecto = value;
        var url1 = $"/api/pushesgroups/pushesgroupsproject/{value}";
        pushes = await repository.GetAsync<List<PushesGroups>>(string.Concat(urlbase, url1));
    }
}