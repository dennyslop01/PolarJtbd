
@using Jtbd.Application.Interfaces
@using Jtbd.Domain.Entities
@using Jtbd.Webapp.Service
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider authenticationStateProvider

@inherits LayoutComponentBase

@if (!string.IsNullOrEmpty(username))
{
    <div class="page">
        <div class="sidebar">
            @if (!string.IsNullOrEmpty(username))
            {
                <NavMenu userrol="@userrol.ToString()"/>
            }
        </div>

        <main>        
            <div class="top-row px-10">
                <div class="col-lg-6 align-content-start">
                    <p>
                        <h5><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JTBD WEB APP – Empresas Polar</strong></h5>
                    </p>
                </div>
                <div class="col-lg-5 d-flex justify-content-end mb-3">
                    <strong>@username</strong>
                     @* <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a> *@
                </div>
            </div>

            <article class="content px-4">
               @Body
            </article>
        </main>
    </div>

    <div id="blazor-error-ui" data-nosnippet>
        An unhandled error has occurred.
        <a href="." class="reload">Reload</a>
        <span class="dismiss">🗙</span>
    </div>
}
else
{
    <PageTitle>No Autorizado</PageTitle>

    <div class="row align-content-center">
        <div class="col-lg-11">
            <div class="col-lg-11">
                <h3 class="text-center mt-4">No Autorizado</h3>
                <h6>@usernamelargo</h6>
                <h6>@username</h6>
            </div>
        </div>
    </div>
}

@code{
    private string username = string.Empty;
    private string usernamelargo = string.Empty;
    private int userrol = 5;

    [Inject] private IEmployee repouser { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    @inject SessionService sessionService

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(sessionService.UserName))
            {
                var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity.IsAuthenticated)
                {
                    usernamelargo = authState.User.Identity.Name;
                    username = authState.User.Identity.Name.Split(@"\")[1].Trim();
                    Employee user = await repouser.GetByUsernameAsync(username);

                    if (user != null)
                    {
                        sessionService.UserRol = user.EmployeeRol;
                        userrol = user.EmployeeRol;
                        sessionService.UserName = username;
                        sessionService.UserDepart = user.Deparments.Id;
                    }
                }
            }
            else
            {
                username = sessionService.UserName;
                userrol = sessionService.UserRol;
            }
        }
        catch{}
    }
}